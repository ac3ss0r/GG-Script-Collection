
LIBX='libil2cpp.so'
TargetLib='libil2cpp.so[2].start' 
--██████████████████████
data=1 
gg.setVisible(false)   

liby=1 xatrue=0
if TargetLib~="nil" then 
    libx=gg.getRangesList(LIBX)  
        for i, v in ipairs(libx) do
            if libx[i].state == "Xa" then 
                libz=LIBX.."["..liby.."]"  
                xatrue=1
                break 
            end 
        liby=liby+1
       end 
else
    xatrue=3 
end 
   
if xatrue==0 then 
gg.alert("×× ERROR ××\n\n"..TargetLib.." Not Found","[ EXIT ]")  
gg.toast("EXIT")
gg.setVisible(true) 
os.exit()
end 

gg.setRanges(gg.REGION_ANONYMOUS) 
ON="√  "
OFF="×  "
Test=OFF

function menu()
data=0  
mc=gg.multiChoice({
	"[EXIT]",
    Test.."Test"},
	nil,"")  
	
	if mc==nil then gg.toast("CANCELLED") return end 
	if mc[1] then exit() return end 
    if mc[2] then test() end
end -- menu 


function test()
--
GM=OFF
o= x="" arm()
--end
GM=ON
end




b=1 d=4 e=64 f=16 w=2 q=32 
-----------------------------------------
function wait()
gg.toast("Please Wait.. ") 
end 
-----------------------------------------
function clear()
gg.getResults(gg.getResultsCount())
gg.clearResults()
end 
-----------------------------------------
function clearall() 
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.getListItems()
gg.clearList()
end 
-----------------------------------------
function search()
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.searchNumber(x,t) 
end 
-----------------------------------------
function refine()
gg.refineNumber(x,t) 
end  
-----------------------------------------
function edit()
gg.getResults(gg.getResultsCount())
gg.editAll(x,t) 
end 
-----------------------------------------
function freeze()
freez=gg.getResults(gg.getResultsCount())
for i, v in ipairs(freez) do
freez[i].freeze=true 
end
gg.addListItems(freez) 
end 
-----------------------------------------
function get()
gg.getResults(gg.getResultsCount())
end 
-----------------------------------------
function check()
gg.getResults(gg.getResultsCount())
local check = gg.getResultsCount()
    if check == 0 then
    gg.toast("× ERROR ×")
    E = 0 else E = 1
    end 
cnt = check 
end 
-----------------------------------------
function exit() 
gg.processResume() 
gg.getListItems()
gg.clearList()
gg.clearResults()
gg.toast("[EXIT]")
gg.setVisible(true) 
os.exit()
return 
end  
-----------------------------------------
function arm()
o=tonumber(o) 
xdump=nil xdump={} 
xdump[1]={} xdump[2]={}
xdump[1].address=xdataGGx + o
xdump[1].flags=4
    if x==0 then xdump[1].value=xfalse end
    if x==1 then xdump[1].value=xtrue end
    if x~=0 and x~=1 then xdump[1].value=x end 
xdump[2].address=xdataGGx+(o+4)
xdump[2].flags=4
xdump[2].value=xEND 
gg.setValues(xdump) 
end 
 
 
 if xatrue==1 then xdataGGx=gg.getRangesList(LIBX)[liby].start end 
--███████████████████████

while true do 
	if gg.isVisible() then
		data = 1
		gg.setVisible(false)
	end
	if data == 1 then 
		menu() 
	end
end  