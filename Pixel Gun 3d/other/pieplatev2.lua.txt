local n, startAddress, endAddress = nil, 0, 0
local function name(lib)
    if n == lib then
        return startAddress, endAddress
    end
    local ranges = gg.getRangesList(lib or "libil2cpp.so")
    for i, v in ipairs(ranges) do
        if v.state == "Xa" then
            startAddress = v.start
            endAddress = ranges[#ranges]["end"]
            break
        end
    end
    return startAddress, endAddress
end

local function getArch()
    local arch = gg.getTargetInfo().x64
    if arch then
        return "x64"
    else
        return "x86"
    end
end

local function PATCH(libname, offset, hex)
    name(libname)
    local t, total = {}, 0
    for h in string.gmatch(hex, "%S%S") do
        table.insert(
            t,
            {
                address = startAddress + offset + total,
                flags = gg.TYPE_BYTE,
                value = h .. "r"
            }
        )
        total = total + 1
    end
    local res = gg.setValues(t)
    if type(res) ~= "string" then
        return true
    else
        gg.alert(res)
        return false
    end
end

PATCH("libil2cpp.so", OFFSET, "HEX")
