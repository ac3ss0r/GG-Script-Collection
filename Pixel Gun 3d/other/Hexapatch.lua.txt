local n, startAddress, endAddress = nil, 0, 0
local function name(lib)
	if n == lib then
		return startAddress, endAddress
	end
	local ranges = gg.getRangesList(lib or 'libil2cpp.so')
	for i, v in ipairs(ranges) do
		if v.state == "Xa" then
			startAddress = v.start
			endAddress = ranges[#ranges]['end']
			break
		end
	end
	return startAddress, endAddress
end

local function setHexMemory(libname, offset, hex)
	name(libname)
	local t, total = {}, 0
	for h in string.gmatch(hex, "%S%S") do
	    table.insert(t, {
	        address = startAddress + offset + total,
	        flags = gg.TYPE_BYTE,
	        value = h .. "r"
	    })
	    total = total + 1
	end
	local res = gg.setValues(t)
	if type(res) ~= 'string' then
		return true
	else
		gg.alert(res)
		return false
	end
end



-- local isHide = false
local function main()
    local menu = gg.choice({
        "Test", --[[ 1 ]]
        "Exit" --[[ 2 ]]
    }, 0)
    if menu == nil then
    else
        if menu == 1 then
            setHexMemory("libil2cpp.so", 0x123456, "12 07 44 E3 1E FF 2F E1")
        end
        if menu == 2 then os.exit() end
    end
    -- isHide = false
end



while true do
    if gg.isVisible() then
        gg.setVisible(false)
        main()
    end
    gg.sleep(10)
end
