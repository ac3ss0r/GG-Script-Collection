local v0 = string.char
local v1 = string.byte
local v2 = string.sub
local v3 = bit32 or bit
local v4 = v3.bxor
local v5 = table.concat
local v6 = table.insert
local function v7(v8, v9)
	local v15 = {}
	for v22 = 1, #v8 do
		v6(v15, v0(v4(v1(v2(v8, v22, v22 + 1)), v1(v2(v9, 1 + ((v22 - 1) % #v9), 1 + ((v22 - 1) % #v9) + 1))) % 256))
	end
	return v5(v15)
end
local function v10()
	local v16 = 0 - 0
	local v17
	local v18
	while true do
		if v16 == (652 - (182 + 470)) then
			local v24 = 1307 - (1298 + 9)
			while true do
				if v24 == (0 + 0) then
					v17 = 1531 - (1265 + 266)
					v18 = gg.getRangesList(
						v7("\215\78\173\11\21\109\193\77\203\9\188\13", "\187\39\207\98\121\95\162\61")
					)
					v24 = 1 + 0
				end
				if v24 == 1 then
					v16 = 1884 - (864 + 1019)
					break
				end
			end
		end
		if v16 == 1 then
			for v25, v26 in ipairs(v18) do
				if v26.state == v7("\208\208", "\136\177\57\167\220\196") then
					v17 = v26.start
					break
				end
			end
			return v17
		end
	end
end
local function v11(v12, v13, v14)
	local v19, v20 = {}, 0 - 0
	for v23 in string.gmatch(v14, v7("\8\193\30\124", "\45\146\59\47\57\27\81")) do
		table.insert(v19, {
			[v7("\9\168\221\222\136\48\27", "\104\204\185\172\237\67")] = v12 + v13 + v20,
			[v7("\52\179\38\16\67", "\82\223\71\119\48")] = gg.TYPE_BYTE,
			[v7("\239\209\182\202\252", "\153\176\218\191")] = v23 .. "r",
		})
		v20 = v20 + (1 - 0)
	end
	local v21 = gg.setValues(v19)
end
gg.alert(
	v7(
		"\157\10\248\173\233\8\231\175\170\0\238\180\233\23\171\128\166\25\171\244\250\69\185\232\251\75\247\230\177\2\229\229\249\88\184\245",
		"\201\107\139\198"
	)
)
gg.setVisible(false)
v11(
	v10(),
	68065788,
	v7("\14\110\118\114\214\147\4\110\118\119\212\147\127\110\118\114\213\147\9\24\118\6\208", "\60\94\86\66\230\179")
)
gg.toast(v7("\174\34\202\235\203", "\234\77\164\142"))
