local n, startAddress, endAddress = nil, 0, 0
local function name(lib)
	if n == lib then
		return startAddress, endAddress
	end
	local ranges = gg.getRangesList(lib or "libil2cpp.so")
	for i, v in ipairs(ranges) do
		if v.state == "Xa" then
			startAddress = v.start
			endAddress = ranges[#ranges]["end"]
			break
		end
	end
	return startAddress, endAddress
end

local function setHexMemory(libname, offset, hex)
	name(libname)
	local t, total = {}, 0
	for h in string.gmatch(hex, "%S%S") do
		table.insert(t, {
			address = startAddress + offset + total,
			flags = gg.TYPE_BYTE,
			value = h .. "r",
		})
		total = total + 1
	end
	local res = gg.setValues(t)
	if type(res) ~= "string" then
		return true
	else
		gg.alert(res)
		return false
	end
end
--------------------------------------------------------------------------
function edit()
	gg.setVisible(false)
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	setHexMemory("libil2cpp.so", 0x3D633B0, "00 00 80 52 C0 03 5F D6") -- Bundles
	setHexMemory("libil2cpp.so", 0x3D636C0, "00 00 80 52 C0 03 5F D6") -- Bundles
	gg.toast(" Done, if didn't work just execute again ")
end
--------------------------------------------------------------------------
gg.setVisible(false)
gg.alert("Bundles by Dari#1333 [v23.1.0]")
edit()
--------------------------------------------------------------------------
