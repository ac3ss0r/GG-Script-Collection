function generatedecimalconversionstring(choices)
	decimalconversionstring = "{"
	for choiceindex = 1, #choices do
		decimalconversionstring = decimalconversionstring
			.. '\n\t"'
			.. hextodecimal(armtohex(generateassemblycode(choices[choiceindex])))
			.. '",'
	end
	decimalconversionstring = decimalconversionstring .. "\n\t}"
	print(decimalconversionstring)
	os.exit()
end

function indexof(item, list)
	for index = 1, #list do
		if tostring(list[index]) == tostring(item) then
			return index
		end
	end
	return nil
end

function int(number)
	number = tostring(tonumber(number))
	decimalpointindex = string.find(number, "%.")
	if decimalpointindex ~= nil then
		--If there is a decimal point, remove the decimal point and everything after it
		number = string.sub(number, 1, decimalpointindex - 1)
	end
	return (tonumber(number))
end

function generateassemblycode(returnvalue)
	code = "Mov W0, #" .. returnvalue .. "\nRet"
	return code
end

function armtohex(fullarm)
	fullhex = ""
	--Thanks to Enyby for the original arm hex converter I used code from:
	-- https://gameguardian.net/forum/files/file/2004-arm-converter/
	for arm in string.gmatch(fullarm, "[^\r\n]+") do
		local addr = gg.getRangesList("libc.so")
		for i, v in ipairs(addr) do
			if v.type:sub(2, 2) == "w" then
				addr = { { address = v.start, flags = gg.TYPE_DWORD } }
			end
		end
		if not addr[1].address then
			print("Error occured converting arm code to hex: Failed to get address ", addr)
			gg.setVisible(true)
			os.exit()
		end
		local old = gg.getValues(addr)
		addr[1].value = "~A8 " .. arm
		local ok, err = pcall(gg.setValues, addr)
		local out
		if not ok then
			err = err:gsub("^.* '1': ", ""):gsub("\nlevel = 1.*$", "")
			print("Error occured converting arm code to hex: " .. err)
			gg.setVisible(true)
			os.exit()
		else
			out = gg.getValues(addr)
			out = out[1].value & 0xFFFFFFFF
			gg.setValues(old)
			if not hex then
				out = string.unpack(">I4", string.pack("<I4", out))
			end
			out = string.format("%08X", out)
			fullhex = fullhex .. out
		end
	end
	return fullhex
end

function hextodecimal(hex)
	oldhex = string.gsub(tostring(hex), " ", "")
	hex = ""
	thisbyte = ""
	for letterindex = 1, #oldhex do
		thisbyte = thisbyte .. oldhex:sub(letterindex, letterindex)
		if #thisbyte == 2 then
			hex = thisbyte .. hex
			thisbyte = ""
		end
	end
	if not (string.sub(hex, 1, 2) == "0x") then
		hex = "0x" .. hex
	end
	return (tonumber(hex))
	--[[
	
        thanks to ItsSC for this function (found at https://gameguardian.net/forum/topic/31634-converting-decimal-to-hex/)

	--]]
end

function findbestsearch(searches, refine)
	searchfound = false
	bestsearch = 0
	bestsearchresultscount = 9999999999999999999999
	bestsearchresults = {}
	for i = 1, #searches do
		thissearch = searches[i]
		gg.clearResults()
		gg.searchNumber(thissearch, gg.TYPE_AUTO)
		gg.refineNumber(refine, gg.TYPE_AUTO)
		resultscount = gg.getResultsCount()
		if resultscount > 0 then
			if not searchfound or resultscount < bestsearchresultscount then
				bestsearch = thissearch
				bestsearchresults = gg.getResults(resultscount)
				bestsearchresultscount = resultscount
				searchfound = true
				if resultscount == 1 then
					break
				end
			end
		end
	end
	if searchfound then
		gg.loadResults(bestsearchresults)
		return bestsearchresults
	end
end

function chooseedit(choices)
	choices = {}
	table.insert(choices, 1, "Custom")
	editvalueprompt = gg.prompt({
		"What number do you want to rewards to (the maximum value is 60000)?\n\nNotice: Changing the rewards to a number over 20k and receiving a reward will instantly ban you!",
	}, { [1] = 250 }, { [1] = "number" })
	editvalue = editvalueprompt[1]
	editvalue = int(editvalue)
	if editvalue > 60000 then
		gg.alert("The maximum value is 60000! Setting to 60000.")
		editvalue = 60000
	end

	if editvalue < 0 then
		gg.alert("Negative numbers are not supported. Setting to 0.")
		editvalue = 0
	end
	if editvalue > 30000 then
		confirm = gg.choice(
			{ "Uh-oh, set it to 30k", "Keep it at " .. editvalue .. " (Dangerous)" },
			nil,
			"WARNING:\nAre you sure you want to set the quantity to over 20k? If you do this and receive any reward from the lottery, sets event, pixel pass event, CraftedWepons, you will be instantly banned."
		)
		if confirm == nil or confirm == 1 then
			editvalue = 30000
		end
	end
	return editvalue
end

function Menu()
	menu = gg.choice({
		"500",
		"1000",
		"2500",
		"5000",
		"10000",
		"20000",
		"30000",
		"Custom",
		"Exit",
	}, nil, "Pick What to Change Rewards to")
	if menu == 1 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,252,720,512"
	end
	if menu == 2 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,252,704,512"
	end
	if menu == 3 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,252,656,512"
	end
	if menu == 4 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,252,576,512"
	end
	if menu == 5 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,252,416,512"
	end
	if menu == 6 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,252,096,512"
	end
	if menu == 7 then
		gg.setVisible(false)
		editvalue = "-2,999,674,702,251,776,512"
	end
	if menu == 8 then
		gg.setVisible(false)
		chooseedit()
	end
	if menu == 9 then
		Exit()
	end
end
Menu()

gg.setRanges(gg.REGION_CODE_APP)

searches = { "-486,380,064,255,173,369Q;-6,188,223,095,648,509,952Q::69" }
refine = "-6,188,223,095,648,509,952"

findbestsearch(searches, refine)
if menu == 8 then
	edit = hextodecimal(armtohex(generateassemblycode(editvalue)))
else
	edit = editvalue
end

for i = 1, #gg.getResults(gg.getResultsCount()) do
	this = gg.getResults(gg.getResultsCount())
end
local t = {}
for x = 1, #this do
	t[x] = {}
	t[x].address = this[x].address
	t[x].flags = gg.TYPE_QWORD
end
gg.loadResults(gg.getValues(t))
gg.getResults(gg.getResultsCount())
gg.editAll(edit, gg.TYPE_QWORD)
gg.clearResults()
