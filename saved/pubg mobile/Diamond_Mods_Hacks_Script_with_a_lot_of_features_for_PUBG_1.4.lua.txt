gg.alert(
	"》❤ 𝖶𝖤𝖫𝖢𝖮𝖬𝖤 𝖳𝖮 𝖣𝖨𝖠𝖬𝖮𝖭𝖣 𝖬𝖮𝖣𝖲 𝖯𝖴𝖡𝖦 𝖧𝖠𝖢𝖪𝖲 𝖲𝖢𝖱𝖨𝖯𝖳 ❤️《"
)
gg.alert(
	"🙂 𝐏𝐥𝐞𝐚𝐬𝐞 𝐕𝐢𝐬𝐢𝐭 𝐓𝐡𝐞 𝐃𝐨𝐰𝐧𝐥𝐨𝐚𝐝 𝐏𝐚𝐠𝐞 𝐀𝐟𝐭𝐞𝐫 𝟐-𝟑 𝐃𝐚𝐲𝐬 𝐀𝐠𝐚𝐢𝐧 𝐅𝐨𝐫 𝐓𝐡𝐞 𝐋𝐚𝐭𝐞𝐬𝐭 𝐔𝐩𝐝𝐚𝐭𝐞 🙂"
)
function UMRANI() end
function setvalue(address, flags, value)
	UMRANI("Modify address value(Address, value type, value to be modified)")
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
os.remove("src/main/java/com/google/errorprone/annotations")
os.remove("src/main/java/com/google/errorprone/annotations")
os.remove("src/main/java/com/google/errorprone/annotations/concurrent")
os.remove("third_party.java_src.error_prone.project.annotations.Google_internal")
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. "  Nothing found!!")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(" Edited: " .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast("  Nothing found!", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. "  Nothing found!!")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(" Edited: " .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast("  Nothing found!", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. " Failed")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		xxx = gg.getResultCount()
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. " Failed")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "\nFound: " .. xxx .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. " Failed")
			end
		end
	end
	gg.clearResults()
end
Memory_offset = function(Search, Write, nc, Type, name)
	gg.clearResults()
	gg.setRanges(nc)
	gg.setVisible(false)
	lx = Search[1][2]
	gg.searchNumber(Search[1][1], lx)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	if count > 0 then
		gg.toast("ᖴOᑌᑎᗪ: " .. count .. " ")
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local num = Search[k][1]
			if Search[k][3] ~= nil then
				lx = Search[k][3]
			else
				lx = Type
			end
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + Search[k][2]
				tmp[#tmp].flags = lx
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			for i = 1, #data do
				for k, w in ipairs(Write) do
					if w[3] ~= nil then
						lx = w[3]
					else
						lx = Type
					end
					t[#t + 1] = {}
					t[#t].address = data[i] + w[2]
					t[#t].flags = lx
					if (w[1] ~= nil) and (w[1] ~= false) then
						t[#t].value = w[1]
						if w[4] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						else
							gg.setValues(t)
						end
					end
				end
			end
			gg.loadResults(t)
			gg.toast(name .. " Edited: " .. #t .. "")
		else
			gg.toast(name .. " Failed")
		end
	else
		gg.toast(name .. " Failed")
	end
	gg.clearResults()
end
function ts(ts)
	if ts then
		gg.toast(ts)
		return true
	else
		gg.toast("nil")
		return false
	end
end
function getso(name)
	return gg.getRangesList(name)[1].start
end
function Memory_modify(add, ta)
	addr = add
	t = {}
	for i = 1, #ta do
		t[i] = {}
		t[i].address = addr + ta[i][3]
		t[i].flags = ta[i][2]
		t[i].value = ta[i][1]
	end
	gg.setValues(t)
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. " Failed")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		xxx = gg.getResultCount()
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. " Failed")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "\nFound: " .. xxx .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. " Failed")
			end
		end
	end
	gg.clearResults()
end
Memory_offset = function(Search, Write, nc, Type, name)
	gg.clearResults()
	gg.setRanges(nc)
	gg.setVisible(false)
	lx = Search[1][2]
	gg.searchNumber(Search[1][1], lx)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	if count > 0 then
		gg.toast("ᖴOᑌᑎᗪ: " .. count .. " ")
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local num = Search[k][1]
			if Search[k][3] ~= nil then
				lx = Search[k][3]
			else
				lx = Type
			end
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + Search[k][2]
				tmp[#tmp].flags = lx
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			for i = 1, #data do
				for k, w in ipairs(Write) do
					if w[3] ~= nil then
						lx = w[3]
					else
						lx = Type
					end
					t[#t + 1] = {}
					t[#t].address = data[i] + w[2]
					t[#t].flags = lx
					if (w[1] ~= nil) and (w[1] ~= false) then
						t[#t].value = w[1]
						if w[4] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						else
							gg.setValues(t)
						end
					end
				end
			end
			gg.loadResults(t)
			gg.toast(name .. " Edited: " .. #t .. "")
		else
			gg.toast(name .. " Failed")
		end
	else
		gg.toast(name .. " Failed")
	end
	gg.clearResults()
end
function ts(ts)
	if ts then
		gg.toast(ts)
		return true
	else
		gg.toast("nil")
		return false
	end
end
function getso(name)
	return gg.getRangesList(name)[1].start
end
function Memory_modify(add, ta)
	addr = add
	t = {}
	for i = 1, #ta do
		t[i] = {}
		t[i].address = addr + ta[i][3]
		t[i].flags = ta[i][2]
		t[i].value = ta[i][1]
	end
	gg.setValues(t)
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. "  Nothing found!!")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(" Edited: " .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast("  Nothing found!", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. "  Nothing found!!")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(" Edited: " .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast("  Nothing found!", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. " Failed")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		xxx = gg.getResultCount()
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. " Failed")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "\nFound: " .. xxx .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. " Failed")
			end
		end
	end
	gg.clearResults()
end
Memory_offset = function(Search, Write, nc, Type, name)
	gg.clearResults()
	gg.setRanges(nc)
	gg.setVisible(false)
	lx = Search[1][2]
	gg.searchNumber(Search[1][1], lx)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local num = Search[k][1]
			if Search[k][3] ~= nil then
				lx = Search[k][3]
			else
				lx = Type
			end
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + Search[k][2]
				tmp[#tmp].flags = lx
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			for i = 1, #data do
				for k, w in ipairs(Write) do
					if w[3] ~= nil then
						lx = w[3]
					else
						lx = Type
					end
					t[#t + 1] = {}
					t[#t].address = data[i] + w[2]
					t[#t].flags = lx
					if (w[1] ~= nil) and (w[1] ~= false) then
						t[#t].value = w[1]
						if w[4] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						else
							gg.setValues(t)
						end
					end
				end
			end
			gg.loadResults(t)
			gg.toast(name .. " Edited: " .. #t .. "")
		else
			gg.toast(name .. " Failed")
		end
	else
		gg.toast(name .. " Failed")
	end
	gg.clearResults()
end
function ts(ts)
	if ts then
		gg.toast(ts)
		return true
	else
		gg.toast("nil")
		return false
	end
end
function getso(name)
	return gg.getRangesList(name)[1].start
end
function Memory_modify(add, ta)
	addr = add
	t = {}
	for i = 1, #ta do
		t[i] = {}
		t[i].address = addr + ta[i][3]
		t[i].flags = ta[i][2]
		t[i].value = ta[i][1]
	end
	gg.setValues(t)
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. " Failed")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		xxx = gg.getResultCount()
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. " Failed")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "\nFound: " .. xxx .. " Edited: " .. xgsl .. "")
			else
				gg.toast(qmnb[2]["name"] .. " Failed")
			end
		end
	end
	gg.clearResults()
end
Memory_offset = function(Search, Write, nc, Type, name)
	gg.clearResults()
	gg.setRanges(nc)
	gg.setVisible(false)
	lx = Search[1][2]
	gg.searchNumber(Search[1][1], lx)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local num = Search[k][1]
			if Search[k][3] ~= nil then
				lx = Search[k][3]
			else
				lx = Type
			end
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + Search[k][2]
				tmp[#tmp].flags = lx
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			for i = 1, #data do
				for k, w in ipairs(Write) do
					if w[3] ~= nil then
						lx = w[3]
					else
						lx = Type
					end
					t[#t + 1] = {}
					t[#t].address = data[i] + w[2]
					t[#t].flags = lx
					if (w[1] ~= nil) and (w[1] ~= false) then
						t[#t].value = w[1]
						if w[4] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						else
							gg.setValues(t)
						end
					end
				end
			end
			gg.loadResults(t)
			gg.toast(name .. " Edited: " .. #t .. "")
		else
			gg.toast(name .. " Failed")
		end
	else
		gg.toast(name .. " Failed")
	end
	gg.clearResults()
end
function ts(ts)
	if ts then
		gg.toast(ts)
		return true
	else
		gg.toast("nil")
		return false
	end
end
function getso(name)
	return gg.getRangesList(name)[1].start
end
function Memory_modify(add, ta)
	addr = add
	t = {}
	for i = 1, #ta do
		t[i] = {}
		t[i].address = addr + ta[i][3]
		t[i].flags = ta[i][2]
		t[i].value = ta[i][1]
	end
	gg.setValues(t)
end
function setvalue(address, flags, value)
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
so = gg.getRangesList("libUE4.so")[1].start

gg.toast("｡☆✼★━━━━━━ENJOY━━━━━━★✼☆｡")

HOME = 1
function HOME()
	MN = gg.choice(
		{
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣ ❦ ᴀɴᴛɪʙᴀɴꜱ\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣ ❦ ʟᴏᴄᴀᴛɪᴏɴ ʜᴀᴄᴋꜱ\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣ ❦ ᴡᴇᴀᴘᴏɴ ʜᴀᴄᴋꜱ\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣ ❦ ᴡɪᴅᴇ ᴠɪᴇᴡ\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣ ❦ ꜱᴋɪɴ ʜᴀᴄᴋꜱ\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣ ❦ ᴇᴍᴏᴛᴇ ʜᴀᴄᴋꜱ\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
			"╔────── ¤ ◎ - ◎ ¤ ──────╗\n┣➣  🅴🆇🅸🆃\n╚────── ¤ ◎ - ◎ ¤ ──────╝\n",
		},
		nil,
		"┏⊳♟️𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 👑ᴄᴏɴϙᴜᴇʀer 90%✓ \n┗⊳📧 ᴛᴇʟᴇɢʀᴀᴍ @JOINTHEHELPERS"
	)
	if MN == nil then
	end
	if MN == 1 then
		ANTIBANS()
	end
	if MN == 2 then
		LOCATIONHACKS()
	end
	if MN == 3 then
		WEAPONHACKS()
	end
	if MN == 4 then
		WIDEVIEW()
	end
	if MN == 5 then
		SKN2()
	end
	if MN == 6 then
		EHAUM()
	end
	if MN == 7 then
		tercih = 2
		CLOSE()
	end
	UMRANIGAMER = -1
end

on = "丨ᴏɴ"
off = "丨ᴏғғ"
x = " "
y = "  "
byp = x
function ANTIBANS()
	ANTIBANSMN = gg.choice(
		{
			"💎ᴅɪᴀᴍᴏɴᴅ ᴍᴏᴅꜱ ʙʏᴘᴀꜱꜱ" .. byp .. "\n",
			"🛢ᴄʟᴇᴀʀ ʀᴇᴘᴏʀᴛꜱ\n",
			"💣ꜰɪx ᴏꜰꜰʟɪɴᴇ ʙᴀɴ\n",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if ANTIBANSMN == nil then
	else
		if ANTIBANSMN == 1 then
			BR()
		end
		if ANTIBANSMN == 2 then
			B4()
		end
		if ANTIBANSMN == 3 then
			BF()
		end
		if ANTIBANSMN == 4 then
			HOME()
		end
	end
	UMRANIGAMER = -1
end

function BR()
	if byp == x then
		gg.toast(
			"ღ𝐓𝐇𝐀𝐍𝐊 𝐘𝐎𝐔 𝐅𝐎𝐑 𝐔𝐒𝐈𝐍𝐆 𝐎𝐔𝐑 𝐒𝐄𝐑𝐕𝐈𝐂𝐄ღ"
		)
		os.remove("src/main/java/com/google/errorprone/annotations")
		os.remove("src/main/java/com/google/errorprone/annotations")
		os.remove("src/main/java/com/google/errorprone/annotations/concurrent")
		os.remove("third_party.java_src.error_prone.project.annotations.Google_internal")
		gg.clearResults()
		gg.setVisible(false)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("17,592,186,044,416~288233678981562368;288233678981562368;288232579469934592", gg.TYPE_QWORD)
		gg.refineNumber("17,592,186,044,416~288233678981562368", gg.TYPE_QWORD)
		gg.getResults(50000)
		gg.editAll("67109633", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("134658;131586", gg.TYPE_DWORD)
		gg.refineNumber("134658", gg.TYPE_DWORD)
		gg.getResults(50000)
		gg.setVisible(false)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("133378;262403", gg.TYPE_DWORD)
		gg.refineNumber("133378", gg.TYPE_DWORD)
		gg.getResults(50000)
		gg.setVisible(false)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("134914;144387", gg.TYPE_DWORD)
		gg.refineNumber("134914", gg.TYPE_DWORD)
		gg.getResults(50000)
		gg.setVisible(false)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("131842;132098", gg.TYPE_DWORD)
		gg.refineNumber("131842", gg.TYPE_DWORD)
		gg.getResults(50000)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("133634;135682", gg.TYPE_DWORD)
		gg.refineNumber("133634", gg.TYPE_DWORD)
		gg.setVisible(false)
		gg.getResults(50000)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("134402;135682", gg.TYPE_DWORD)
		gg.refineNumber("134402", gg.TYPE_DWORD)
		gg.setVisible(false)
		gg.getResults(50000)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_ALLOC)
		gg.setVisible(false)
		gg.searchNumber("133635;135682", gg.TYPE_DWORD)
		gg.refineNumber("133635", gg.TYPE_DWORD)
		gg.setVisible(false)
		gg.getResults(50000)
		gg.editAll("135682", gg.TYPE_DWORD)
		gg.clearResults()
		gg.clearResults()
		gg.clearList()
		gg.alert("Diamond Mods Bypass✓")
		byp = y
	else
		gg.clearResults()
		gg.alert("𝐁𝐲𝐩𝐚𝐬𝐬 𝐈𝐬 𝐀𝐥𝐫𝐞𝐚𝐝𝐲 𝐀𝐜𝐭𝐢𝐯𝐞!")
		byp = y
	end
end

function BF()
	gg.clearList()
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f81fec, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f81fdc, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f81fe4, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f81ff0, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f58, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f5c, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f60, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f64, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f68, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f6c, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f70, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f74, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f78, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f7c, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f80, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f84, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f88, ["flags"] = 16, ["value"] = 0 } })
	gg.getRangesList("libtersafe.so")
	gg.setValues({ [1] = { ["address"] = 0xe4f51f8c, ["flags"] = 16, ["value"] = 0 } })
	gg.toast("Fix Offline Ban Diamond✓")
end

l1 = off
function LOCATIONHACKS()
	LOCATIONHACKSMN = gg.choice(
		{
			"📍ᴀɴᴛᴇɴᴀ (ɴᴇᴇᴅ ᴛᴏ ʙᴇ ᴀᴘᴘʟɪᴇᴅ ɪɴ ᴇᴠᴇʀʏ ᴍᴀᴛᴄʜ) = [ꜰᴏʀ ꜱᴏᴍᴇ ᴅᴇᴠɪᴄᴇꜱ]"
				.. l1
				.. "\n",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if LOCATIONHACKSMN == nil then
	else
		if LOCATIONHACKSMN == 1 then
			a()
		end
		if LOCATIONHACKSMN == 2 then
			HOME()
		end
	end
	UMRANIGAMER = -1
end

function a()
	if l1 == off then
		gg.clearResults()
		gg.setRanges(gg.REGION_ANONYMOUS)
		gg.searchNumber(
			"88.50576019287F;87.27782440186F;-100.91194152832F;1F::13",
			gg.TYPE_FLOAT,
			false,
			gg.SIGN_EQUAL,
			0,
			-1
		)
		gg.searchNumber("88.50576019287F;87.27782440186F;1F", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		loc101 = gg.getResults(6)
		gg.editAll("1.96875;1.96875;999;1.96875;1.96875;999", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
		gg.clearResults()
		gg.setRanges(gg.REGION_ANONYMOUS)
		gg.searchNumber(
			"88.50576019287F; 87.27782440186F; -100.91194152832F; 1F :: 13",
			gg.TYPE_FLOAT,
			false,
			gg.SIGN_EQUAL,
			0,
			-1
		)
		gg.searchNumber("88.50576019287F; 87.27782440186F; 1F", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		loc201 = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
		gg.editAll("1.96875; 1.96875; 999; 1.96875; 1.96875; 999", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("Antena Diamond✓")
		l1 = on
	else
		gg.clearResults()
		gg.setValues(loc101)
		gg.setValues(loc201)
		gg.toast("Antena [OFF] Diamond✓")
		l1 = off
	end
end

function WIDEVIEW()
	WIDEVIEWMN = gg.choice(
		{
			"😆ᴡɪᴅᴇ ᴠɪᴇᴡ丨ᴏɴ [ʏᴏᴜ ᴄᴀɴ ᴄʜᴏᴏꜱᴇ ʜᴏᴡ ᴍᴜᴄʜ (ᴡɪᴅᴇ) ᴠɪᴇᴡ ʏᴏᴜ ᴡᴀɴᴛ]\n",
			"😛ᴡɪᴅᴇ ᴠɪᴇᴡ丨ᴏғғ\n",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if WIDEVIEWMN == nil then
	else
		if WIDEVIEWMN == 1 then
			WDV()
		end
		if WIDEVIEWMN == 2 then
			DAMNBOY()
		end
		if WIDEVIEWMN == 3 then
			HOME()
		end
	end
	UMRANIGAMER = -1
end

function WDV()
	evo1 = gg.prompt(
		{
			"ᴡɪᴅᴇ ᴠɪᴇᴡ (220 ᴅᴇꜰᴀᴜʟᴛ)[220;999]",
		},
		evo1,
		{
			"number",
		}
	)
	if evo1 == nil then
	elseif evo1[1] then
		jorem = evo1[1]
		gg.setRanges(gg.REGION_ANONYMOUS)
		gg.clearResults()
		gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
		gg.searchNumber("220;178;15 ", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("220", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		widev = gg.getResults(300)
		gg.editAll(jorem, gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("Wide View " .. jorem .. "x Diamond✓")
	end
end

function DAMNBOY()
	gg.clearResults()
	gg.setValues(widev)
	gg.toast("Wide View [OFF] Diamond✓")
end

ab200 = off
al = off
lr = off
sc = off
function WEAPONHACKS()
	WEAPONHACKS1 = gg.multiChoice(
		{
			"🤗ᴀɪᴍʙᴏᴛ [ꜱᴀꜰᴇ]" .. ab200 .. "\n",
			"🤨ᴀɪᴍʟᴏᴄᴋ [ꜱᴀꜰᴇ]" .. al .. "\n",
			"🙂ʟᴇꜱꜱ ʀᴇᴄᴏɪʟ [ꜱᴀꜰᴇ]" .. lr .. "\n",
			"🤯ꜱᴍᴀʟʟ ᴄʀᴏꜱꜱʜᴀɪʀ [ꜱᴀꜰᴇ]" .. sc .. "\n",
			"•───────✧────────• \n🍳ᴀʟʟ ɪɴ ᴏɴᴇ [ʙʀᴜᴛᴀʟ]\n",
			"🌶ᴀɴᴛɪ ꜱʜᴀᴋᴇ [ʙʀᴜᴛᴀʟ]\n",
			"✨ᴍᴀɢɪᴄ ʙᴜʟʟᴇᴛ [ʙʀᴜᴛᴀʟ]\n",
			"🌹ʜɪɢʜ ᴅᴀᴍᴀɢᴇ [ʙʀᴜᴛᴀʟ]\n",
			"😏ᴏɴᴇ ꜱʜᴏᴛ ᴋɪʟʟ [ʙʀᴜᴛᴀʟ] (ᴏɴʟʏ ʀᴇᴄᴏᴍᴍᴇɴᴅᴇᴅ ꜰᴏʀ ʀᴏᴏᴍꜱ)\n",
			"🤕ᴀᴜᴛᴏ ʜᴇᴀᴅꜱʜᴏᴛ [ʙʀᴜᴛᴀʟ] (ᴏɴʟʏ ʀᴇᴄᴏᴍᴍᴇɴᴅᴇᴅ ꜰᴏʀ ʀᴏᴏᴍꜱ)\n",
			"😙ɪɴꜱᴛᴀɴᴛ ʜɪᴛ [ʙʀᴜᴛᴀʟ] (ᴏɴʟʏ ʀᴇᴄᴏᴍᴍᴇɴᴅᴇᴅ ꜰᴏʀ ʀᴏᴏᴍꜱ)\n•───────✧────────• \n",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if WEAPONHACKS1 == nil then
	else
		if WEAPONHACKS1[1] == true then
			AM()
		end
		if WEAPONHACKS1[2] == true then
			ML()
		end
		if WEAPONHACKS1[3] == true then
			LR()
		end
		if WEAPONHACKS1[4] == true then
			SCross()
		end
		if WEAPONHACKS1[5] == true then
			AIO2N()
		end
		if WEAPONHACKS1[6] == true then
			ANTISK()
		end
		if WEAPONHACKS1[7] == true then
			MagicB()
		end
		if WEAPONHACKS1[8] == true then
			HighDam()
		end
		if WEAPONHACKS1[9] == true then
			OneShot()
		end
		if WEAPONHACKS1[10] == true then
			hdshute()
		end
		if WEAPONHACKS1[11] == true then
			instagrami()
		end
		if WEAPONHACKS1[12] == true then
			HOME()
		end
	end
	UMRANIGAMER = -1
end

function hdshute()
	gg.clearResults()
	gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(5)
	gg.editAll("162.5", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(5)
	gg.editAll("100.5", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.clearResults()
	gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("9.201618;30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("300", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber("0.10000000149;64.50088500977", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("0.10000000149", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(50)
	gg.editAll("8", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber("-298284466;-1.304566e23F", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber("-1,883,348,481,058,764,210", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("-1,883,348,485,055,444,540", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("; 䇈 䇴", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("; 䓺 䓺", gg.TYPE_WORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber("-6.1549454e27;1.8638966e-20;-1.1144502e28;0::", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("-1.1144502e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(1)
	gg.editAll("0", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◘◘◘◘60%")
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber(
		"-1.2382424e28;-1.4239333e28;-1.1144502e28;-1.8331474e27;-7.1608877e24::",
		gg.TYPE_FLOAT,
		false,
		gg.SIGN_EQUAL,
		0,
		-1
	)
	gg.refineNumber("-1.1144502e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("7.5", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◘◘◘70%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("25.0;30.5::5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("300", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◘◘80%")
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(15)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("9.201618;30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("220", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("Auto Headshot Diamond✓")
end

function instagrami()
	gg.clearResults()
	gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber("-1,883,348,481,058,764,210", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("-1,883,348,481,058,764,210", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(100)
	gg.editAll("-1,883,348,485,055,444,540", gg.TYPE_QWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◘◘◘70%")
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	py = 61451176
	setvalue(so + py, 16, 0)
	py = 61451176
	setvalue(so + py, 16, 0)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.searchNumber("-298284466;-1.304566e23F", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("Intant Hit Diamond✓")
end

function ANTISK()
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◘◘◘◘60%")
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.clearResults()
	gg.searchNumber("-1.11445016e28;128.0;-7.9691952e22:9", gg.TYPE_FLOAT)
	gg.refineNumber("-1.11445016e28", gg.TYPE_FLOAT)
	gg.getResults(10)
	gg.editAll("0", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
	gg.clearResults()
	gg.searchNumber("-308,340,221;-485,490,680;514,853,441;-300,938,736:13", gg.TYPE_DWORD)
	gg.refineNumber("-300,938,736", gg.TYPE_DWORD)
	gg.getResults(10)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("Anti Shake Diamond✓")
end

function OneShot()
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("-1,883,348,481,058,764,210", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("-1,883,348,481,058,764,210", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("-1,883,348,485,055,444,540", gg.TYPE_QWORD)
	gg.clearResults()
	gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	gg.searchNumber("10;45", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("10", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(100)
	gg.editAll("999999", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("-1281263094875551231", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("-1281263094875551231", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineAddress("7B0", -1, gg.TYPE_QWORD, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("-1281263094875551231", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(1401)
	gg.editAll("-1281263098870628352", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("-298284466;-1.304566e23F", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(999)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("69.5;35;33", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(6)
	gg.editAll("160;140;230", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("0.9986295104", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("0.9986295104", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("1224995", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("0.10000000149;64.50088500977", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("0.10000000149", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(50)
	gg.editAll("8", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
	gg.clearResults()
	gg.setRanges(gg.REGION_BAD)
	gg.setVisible(false)
	gg.searchNumber("-88.66608428955;26:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("26", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("-460", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber("-88.73961639404;28:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("-560", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◘◘◘◘60%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	gg.searchNumber("9.201618;30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("250", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◘◘◘70%")
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("-298284466;-1.304566e23F", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.setVisible(false)
	gg.searchNumber("-298284466", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◘◘80%")
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("-1,883,348,481,058,764,210", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(99)
	gg.editAll("-1,883,348,485,055,444,540", gg.TYPE_QWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("189", gg.TYPE_FLOAT)
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◙100%")
	gg.setVisible(false)
	gg.searchNumber("15;28;16;26;8;18", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(56)
	gg.editAll("-1339", gg.TYPE_FLOAT)
	gg.toast("One Shot Kill Diamond✓")
end

function HighDam()
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
	gg.setVisible(false)
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("30.5;23.0", gg.TYPE_FLOAT)
	gg.refineNumber("30.5;23.0", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50)
	gg.editAll("120", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
	gg.setVisible(false)
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("25;30.5~60.5", gg.TYPE_FLOAT)
	gg.refineNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(10)
	gg.editAll("120", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
	gg.setVisible(false)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber(
		"33,90000152588 ;-8,8291245e-8;-2,8322467e25;1,9197789e-43:21",
		gg.TYPE_FLOAT,
		false,
		gg.SIGN_EQUAL,
		0,
		-1
	)
	gg.refineNumber("33,90000152588", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(50)
	gg.editAll("0", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber(
		"48,56470489502 ;6,1529782e-39;-10.357.658,0;-5,2374822e26:17",
		gg.TYPE_FLOAT,
		false,
		gg.SIGN_EQUAL,
		0,
		-1
	)
	gg.refineNumber("48,56470489502", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(50)
	gg.editAll("0", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("30.5;23.0", gg.TYPE_FLOAT)
	gg.refineNumber("30.5;23.0", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50)
	gg.editAll("400", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("25;30.5~60.5", gg.TYPE_FLOAT)
	gg.refineNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(10)
	gg.editAll("200", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◙100%")
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber("29,5;30,0 ;1,5046328e-36;4,2319214e-42:21", gg.TYPE_FLOAT)
	gg.refineNumber("29,5;30,0", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(10)
	gg.editAll("0", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("High Damage Diamond✓")
end

function MagicB()
	gg.setRanges(gg.REGION_BAD)
	gg.searchNumber("-88.66608428955;26", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("26", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("-466", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
	gg.searchNumber("-88.73961639404;28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("-568", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("9.201618;30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("280", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
	gg.setRanges(gg.REGION_BAD)
	gg.searchNumber("-88.66608428955;26:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("26", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("-460", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
	gg.searchNumber("-88.73961639404;28:512", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("-560", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("9.201618;30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("260", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("3.5;1;200;20::999", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("3.5;1;200;20", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(300)
	gg.editAll("1.0e20", gg.TYPE_FLOAT)
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber("0.0001;360.0;0.0;1,478,828,416.0", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("0.0001", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(2)
	gg.editAll("500000", gg.TYPE_FLOAT)
	gg.clearResults()
	function baloch() end
	function setvalue(address, flags, value)
		baloch("Modify address value (address, value type, value to be modified)")
		local tt = {}
		tt[1] = {}
		tt[1].address = address
		tt[1].flags = flags
		tt[1].value = value
		gg.setValues(tt)
	end
	function split(szFullString, szSeparator)
		local nFindStartIndex = 1
		local nSplitIndex = 1
		local nSplitArray = {}
		while true do
			local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
			if not nFindLastIndex then
				nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
				break
			end
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
			nFindStartIndex = nFindLastIndex + string.len(szSeparator)
			nSplitIndex = nSplitIndex + 1
		end
		return nSplitArray
	end
	function xgxc(szpy, qmxg)
		for x = 1, #qmxg do
			xgpy = szpy + qmxg[x]["offset"]
			xglx = qmxg[x]["type"]
			xgsz = qmxg[x]["value"]
			xgdj = qmxg[x]["freeze"]
			if xgdj == nil or xgdj == "" then
				gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
			else
				gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
			end
			xgsl = xgsl + 1
			xgjg = true
		end
	end
	function xqmnb(qmnb)
		gg.clearResults()
		gg.setRanges(qmnb[1]["memory"])
		gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "open失败")
		else
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			if gg.getResultCount() == 0 then
				gg.toast(qmnb[2]["name"] .. "open失败")
			else
				sl = gg.getResults(999999)
				sz = gg.getResultCount()
				xgsl = 0
				if sz > 999999 then
					sz = 999999
				end
				for i = 1, sz do
					pdsz = true
					for v = 4, #qmnb do
						if pdsz == true then
							pysz = {}
							pysz[1] = {}
							pysz[1].address = sl[i].address + qmnb[v]["offset"]
							pysz[1].flags = qmnb[v]["type"]
							szpy = gg.getValues(pysz)
							pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
							szpd = split(pdpd, ";")
							tzszpd = szpd[1]
							pyszpd = szpd[2]
							if tzszpd == pyszpd then
								pdjg = true
								pdsz = true
							else
								pdjg = false
								pdsz = false
							end
						end
					end
					if pdjg == true then
						szpy = sl[i].address
						xgxc(szpy, qmxg)
					end
				end
				if xgjg == true then
					gg.toast(qmnb[2]["name"] .. "open,共修改" .. xgsl .. "条数据")
				else
					gg.toast(qmnb[2]["name"] .. "open失败")
				end
			end
		end
	end
	so = gg.getRangesList("libUE4.so")[1].start
	py = 38433980
	setvalue(so + py, 16, 0)
	gg["setRanges"](gg.REGION_ANONYMOUS)
	gg["searchNumber"]("9.201618;30.5;25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg["searchNumber"]("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg["getResults"](15)
	gg["editAll"]("375", gg.TYPE_FLOAT)
	gg["clearResults"]()
	gg.toast("◙◙◙◙◙◙◙◙◙◙100%")
	gg["setRanges"](gg.REGION_ANONYMOUS)
	gg["searchNumber"]("; 䇈 䇴", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
	gg["getResults"](100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg["editAll"]("; 䓺 䓺", gg.TYPE_WORD)
	gg["clearResults"]()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("23;25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("25;30.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(100)
	gg.editAll("200", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("15;28;16;26;8;18", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(56)
	gg.editAll("-1339", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("Magic Bullet Diamond✓")
end

function SCross()
	if sc == off then
		gg.clearResults()
		gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
		gg.setRanges(gg.REGION_ANONYMOUS)
		gg.searchNumber("2~4;1.09375;1;18;3.5::25", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("2~4;1.09375::5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("2~4", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		sc1 = gg.getResults(50)
		gg.editAll("-0.5", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
		gg.clearResults()
		gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
		gg.searchNumber(
			"-1.2382424e28;-1.4239333e28;-1.1144502e28;-1.8331474e27;-7.1608877e24::",
			gg.TYPE_FLOAT,
			false,
			gg.SIGN_EQUAL,
			0,
			-1
		)
		gg.refineNumber("-1.1144502e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		sc2 = gg.getResults(2)
		gg.editAll("7.5", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("Small Crosshair Diamond✓")
		sc = on
	else
		gg.clearResults()
		gg.setValues(sc1)
		gg.setValues(sc2)
		ab = off
		gg.toast("Small Crosshair [OFF] Diamond✓")
	end
end

function AM()
	if ab200 == off then
		gg.clearResults()
		gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
		gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
		gg.searchNumber("-476053504;-349478012:189", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("-476053504", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		ab201 = gg.getResults(100)
		gg.editAll("-476053503;-476053504", gg.TYPE_DWORD)
		gg.clearResults()
		gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("-511703038;-336586961:29", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("-511703038", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		ab202 = gg.getResults(2)
		gg.editAll("-476053504", gg.TYPE_DWORD)
		gg.clearResults()
		gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
		gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
		gg.searchNumber("2015175168", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		ab203 = gg.getResults(6)
		gg.editAll("0", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("1.6615354e35;-5.8048945e26:9", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("1.6615354e35", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		ab204 = gg.getResults(6)
		gg.editAll("1.6615351e35", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
		gg.clearResults()
		gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
		gg.searchNumber("-476053504;-349478012:189", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("-476053504", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		ab205 = gg.getResults(100)
		gg.editAll("-476053503;-476053504", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("-511703038;-336586961:29", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("-511703038", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		ab206 = gg.getResults(2)
		gg.editAll("-476053504", gg.TYPE_DWORD)
		gg.clearResults()
		gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
		gg.searchNumber("2015175168", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		ab207 = gg.getResults(6)
		gg.editAll("0", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
		gg.clearResults()
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber(
			"-6.1646628e27;-3.82564576e28;-2.78989171e28;-3.74440972e28;-2.8053577e28",
			gg.TYPE_FLOAT,
			false,
			gg.SIGN_EQUAL,
			0,
			-1
		)
		gg.searchNumber("-2.78989171e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		ab208 = gg.getResults(999)
		gg.editAll("0", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("Aimbot Diamond✓")
		ab200 = on
	else
		gg.setValues(ab201)
		gg.setValues(ab202)
		gg.setValues(ab203)
		gg.setValues(ab204)
		gg.setValues(ab205)
		gg.setValues(ab206)
		gg.setValues(ab207)
		gg.setValues(ab208)
		ab200 = off
		gg.toast("Aimbot [OFF] Diamond✓")
	end
end

function ML()
	if al == off then
		gg.clearResults()
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("-299890176D;2046820354D;-494071768D", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		gg.refineNumber("2046820354", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		al1 = gg.getResults(200)
		gg.editAll("2046820353", gg.TYPE_DWORD)
		gg.clearResults()
		gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
		gg.setRanges(gg.REGION_C_DATA)
		gg.searchNumber("360;0.0001;1478828288", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("0.0001", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		al2 = gg.getResults(100)
		gg.editAll("9999", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("0.0001;360.0;0.0;1,478,828,416.0", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("0.0001", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		al3 = gg.getResults(2)
		gg.editAll("5000", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
		gg.clearResults()
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("-299890176D;2046820354D;-494071768D", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		gg.refineNumber("2046820354", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
		al4 = gg.getResults(200)
		gg.editAll("2046820353", gg.TYPE_DWORD)
		gg.clearResults()
		gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
		gg.setRanges(gg.REGION_C_DATA)
		gg.searchNumber("360;0.0001;1478828288", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("0.0001", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		al5 = gg.getResults(100)
		gg.editAll("9999", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
		gg.setRanges(gg.REGION_CODE_APP)
		gg.searchNumber("0.0001;360.0;0.0;1,478,828,416.0", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("0.0001", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		al6 = gg.getResults(2)
		gg.editAll("5000", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("AimLock Diamond✓")
		al = on
	else
		gg.setValues(al1)
		gg.setValues(al2)
		gg.setValues(al3)
		gg.setValues(al4)
		gg.setValues(al5)
		gg.setValues(al6)
		al = off
		gg.toast("AimLock [OFF] Diamond✓")
	end
end

function LR()
	if lr == off then
		gg.clearResults()
		gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
		gg.setRanges(16384)
		gg.searchNumber("-2.786982e28;-2.2673448e24;-1.13688735e-13", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		gg.searchNumber("-2.786982e28", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		lr1 = gg.getResults(1)
		gg.editAll("0", gg.TYPE_FLOAT)
		gg.clearResults()
		gg.toast("Less Recoil Diamond✓")
		lr = on
	else
		gg.setValues(lr1)
		lr = off
		gg.toast("Less Recoil [OFF] Diamond✓")
	end
end

function AIO2N()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◘◘◘◘60%")
	gg.searchNumber("-308,340,074;-309,065,161;-290,186,560;-286,131,696::13", gg.TYPE_DWORD)
	gg.refineNumber("-290,186,560", gg.TYPE_DWORD)
	gg.getResults(10)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◘◘◘70%")
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.clearResults()
	gg.searchNumber("-1.11445016e28;128.0;-7.9691952e22:9", gg.TYPE_FLOAT)
	gg.refineNumber("-1.11445016e28", gg.TYPE_FLOAT)
	gg.getResults(10)
	gg.editAll("0", gg.TYPE_FLOAT)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◘◘80%")
	gg.clearResults()
	gg.searchNumber("-308,340,221;-485,490,680;514,853,441;-300,938,736:13", gg.TYPE_DWORD)
	gg.refineNumber("-300,938,736", gg.TYPE_DWORD)
	gg.getResults(10)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
	gg.clearResults()
	gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◙100%")
	gg.searchNumber("-298,317,312;-300,938,736;-323,122,430;-390,231,024::13", gg.TYPE_DWORD)
	gg.refineNumber("-300,938,736", gg.TYPE_DWORD)
	gg.getResults(1)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("All In One (NEW) Diamond✓ ")
end

gg.alert(
	"🎭Make Sure; That Your PUBGM Is Open And Selected In GG´s Process List; Otherwise The Script Will End Automatically🎭"
)
function setvalue(address, flags, value)
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function setvalue(address, flags, value)
	PS("Modify address value (address, value type, value to be modified)")
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "open失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "open失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "open,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "open失败")
			end
		end
	end
end --@Saifu_hkc
function edit(orig, ret)
	_om = orig[1].memory or orig[1][1]
	_ov = orig[3].value or orig[3][1]
	_on = orig[2].name or orig[2][1]
	gg.clearResults()
	gg.setRanges(_om)
	gg.searchNumber(_ov, orig[3].type or orig[3][2])
	sz = gg.getResultCount()
	if sz < 1 then
		gg.toast(_on .. "开启失败")
	else
		sl = gg.getResults(720)
		for i = 1, sz do
			ist = true
			for v = 4, #orig do
				if ist == true and sl[i].value == _ov then
					cd = { {} }
					cd[1].address = sl[i].address + (orig[v].offset or orig[v][2])
					cd[1].flags = orig[v].type or orig[v][3]
					szpy = gg.getValues(cd)
					cdlv = orig[v].lv or orig[v][1]
					cdv = szpy[1].value
					if cdlv == cdv then
						pdjg = true
						ist = true
					else
						pdjg = false
						ist = false
					end
				end
			end
			if pdjg == true then
				szpy = sl[i].address
				for x = 1, #ret do
					xgpy = szpy + (ret[x].offset or ret[x][2])
					xglx = ret[x].type or ret[x][3]
					xgsz = ret[x].value or ret[x][1]
					xgdj = ret[x].freeze or ret[x][4]
					xgsj = { { address = xgpy, flags = xglx, value = xgsz } }
					if xgdj == true then
						xgsj[1].freeze = xgdj
						gg.addListItems(xgsj)
					else
						gg.setValues(xgsj)
					end
				end
				xgjg = true
			end
		end
		if xgjg == true then
			gg.toast(_on .. "开启成功")
		else
			gg.toast(_on .. "开启失败")
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast("已修改" .. #t .. "条数据")
			gg.addListItems(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function js(address, flags, value)
	local jz = {}
	jz[1] = {}
	jz[1].address = address
	jz[1].flags = flags
	jz[1].value = value
	gg.setValues(jz)
end
function jz(py, xl, xgsz)
	flags = xl
	value = xgsz
	so = gg.getRangesList("" .. name .. "")[1].start
	js(so + py, xl, xgsz)
end
function PS() end
function setvalue(address, flags, value)
	PS("修改地址数值(地址,数值类型,要修改的值)")
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. "开启成功" .. #data .. "")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. "开启成功" .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. "开启失败", false)
			return false
		end
	else
		gg.toast("开启失败")
		return false
	end
end
local L0_0
L0_0 = 0
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Name .. "共搜索到" .. #data .. "个数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.sleep(500)
			gg.toast(Name .. "开启成功,共修改" .. #t .. "条数据")
		else
			gg.toast(Name .. "副特征码错误or脸丑\n或者是已经开启过了")
			return false
		end
	else
		gg.toast(Name .. "主特征码错误or脸丑\n或者是已经开启过了")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function edit(orig, ret)
	_om = orig[1].memory or orig[1][1]
	_ov = orig[3].value or orig[3][1]
	_on = orig[2].name or orig[2][1]
	gg.clearResults()
	gg.setRanges(_om)
	gg.searchNumber(_ov, orig[3].type or orig[3][2])
	sz = gg.getResultCount()
	if sz < 1 then
		gg.toast(_on .. "开启失败")
	else
		sl = gg.getResults(720)
		for i = 1, sz do
			ist = true
			for v = 4, #orig do
				if ist == true and sl[i].value == _ov then
					cd = { {} }
					cd[1].address = sl[i].address + (orig[v].offset or orig[v][2])
					cd[1].flags = orig[v].type or orig[v][3]
					szpy = gg.getValues(cd)
					cdlv = orig[v].lv or orig[v][1]
					cdv = szpy[1].value
					if cdlv == cdv then
						pdjg = true
						ist = true
					else
						pdjg = false
						ist = false
					end
				end
			end
			if pdjg == true then
				szpy = sl[i].address
				for x = 1, #ret do
					xgpy = szpy + (ret[x].offset or ret[x][2])
					xglx = ret[x].type or ret[x][3]
					xgsz = ret[x].value or ret[x][1]
					xgdj = ret[x].freeze or ret[x][4]
					xgsj = { { address = xgpy, flags = xglx, value = xgsz } }
					if xgdj == true then
						xgsj[1].freeze = xgdj
						gg.addListItems(xgsj)
					else
						gg.setValues(xgsj)
					end
				end
				xgjg = true
			end
		end
		if xgjg == true then
			gg.toast(_on .. "开启成功")
		else
			gg.toast(_on .. "开启失败")
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast("已修改" .. #t .. "条数据")
			gg.addListItems(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("✨开启成功✨" .. #data .. "")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
		else
			gg.toast("", false)
			return false
		end
	else
		gg.toast("")
		return false
	end
end
local app = {}
function Assert(data)
	if data == nil or data == "" or data == "nil" then
		return false
	else
		return true
	end
end
function mearrass(memory, array)
	if Assert(memory) and Assert(array) then
		return true
	else
		return false
	end
end
function typetab(array, type)
	local datatype = {}
	for i = 1, #array do
		if Assert(array[i].type) then
			table.insert(datatype, i, array[i].type)
		else
			if Assert(type) then
				table.insert(datatype, i, type)
			else
				return false
			end
		end
	end
	return true, datatype
end
function app.memorysearch(memory, array, type)
	gg.setVisible(false)
	local rx = mearrass(memory, array)
	if rx then
		local rx, datatype = typetab(array, type)
		if rx then
			if Assert(array[1].hv) then
				gg.clearResults()
				gg.setRanges(memory)
				gg.searchNumber(array[1].lv .. "~" .. array[1].hv, datatype[1])
				elsegg.clearResults()
				gg.setRanges(memory)
				gg.searchNumber(array[1].lv, datatype[1])
			end
			if gg.getResultCount() == 0 then
				return false
			else
				local tab = {}
				local data = gg.getResults(gg.getResultCount())
				gg.clearResults()
				for i = 1, #data do
					data[i].rx = true
				end
				for i = 2, #array do
					local t = {}
					local offset = array[i].offset
					for x = 1, #data do
						t[#t + 1] = {}
						t[#t].address = data[x].address + offset
						t[#t].flags = datatype[i]
					end
					local t = gg.getValues(t)
					for z = 1, #t do
						if Assert(array[i].hv) then
							if
								tonumber(t[z].value) < tonumber(array[i].lv)
								or tonumber(t[z].value) > tonumber(array[i].hv)
							then
								data[z].rx = false
							end
						else
							if tostring(t[z].value) ~= tostring(array[i].lv) then
								data[z].rx = false
							end
						end
					end
				end
				for i = 1, #data do
					if data[i].rx then
						tab[#tab + 1] = data[i].address
					end
				end
				if #tab > 0 then
					return true, tab
				else
					return false
				end
			end
		else
			print("type参数错误")
			gg.toast("type参数错误")
			os.exit()
		end
	else
		print("memory or array参数错误")
		gg.toast("memory or array参数错误")
		os.exit()
	end
end
function app.memoryread(addr, type)
	local t = {}
	t[1] = {}
	t[1].address = addr
	t[1].flags = type
	if #t > 0 then
		return true, gg.getValues(t)[1].value
	else
		return false
	end
end
function app.memorywrite(addr, type, value, freeze)
	local t = {}
	t[1] = {}
	t[1].address = addr
	t[1].flags = type
	t[1].value = value
	if #t > 0 then
		if Assert(freeze) then
			t[1].freeze = freeze
			return gg.addListItems(t)
		else
			return gg.setValues(t)
		end
	else
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条ΔΘ")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. "搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. "已修改" .. #t .. "条数据")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. "开启失败", false)
			return false
		end
	else
		gg.toast("搜索失败")
		return false
	end
end
bz = 0
sj = (os.date("%Y年%m月%d日%H时%M分%S秒"))
if gg.getTargetPackage() == "com.tencent.iglite" and "com.tencent.iglitece" and "com.tencent.tmgp.pubgmhd" then
	QW = "8"
else
	QW = "16384"
end
if QW == "8" then
	FF = "国服/轻体/轻量版"
else
	FF = "国际/台服/日韩服/越南服/国体服"
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("搜索η" .. #data .. "条ΔΘ")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条ΔΘ")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. "开启成功" .. #data .. "")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. "开启成功" .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. "开启失败", false)
			return false
		end
	else
		gg.toast("开启失败")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. " 开启成功 " .. #data .. "")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. " 开启成功 " .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. " 开启失败 ", false)
			return false
		end
	else
		gg.toast(" 开启失败 ")
		return false
	end
end
so = gg.getRangesList("libUE4.so")[1].start

function SKN2()
	SKN2MN2 = gg.choice(
		{
			"🎨ꜱᴋɪɴɴʏ ᴍɪxʏ [ᴍᴏꜱᴛ ɪɴ ᴏɴᴇ]\n",
			"📂ᴡᴇᴀᴘᴏɴꜱ ᴍᴇɴᴜ\n",
			"📂ꜱᴘᴇᴄɪᴀʟ ᴍᴇɴᴜ\n",
			"📂ᴇɢʏᴘᴛɪᴀɴ ᴘʜᴀʀᴀᴏʜꜱ ᴏᴜᴛꜰɪᴛꜱ\n",
			"📂ᴀɴɪᴍᴀʟꜱ ᴀɴᴅ ᴍᴏɴꜱᴛᴇʀꜱ ᴏᴜᴛꜰɪᴛꜱ\n",
			"📂ʀᴏʏᴀʟ ᴘᴀꜱꜱ 100 ᴏᴜᴛꜰɪᴛꜱ\n",
			"📂ᴄʜʀɪꜱᴛᴍᴀꜱ ᴏᴜᴛꜰɪᴛꜱ\n",
			"📂ᴄʜᴀʀᴀᴄᴛᴇʀꜱ ᴍᴇɴᴜ\n",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if SKN2MN2 == nil then
	else
		if SKN2MN2 == 1 then
			LETSBESKINNY()
		end
		if SKN2MN2 == 2 then
			SKNS2()
		end
		if SKN2MN2 == 3 then
			SPEC2()
		end
		if SKN2MN2 == 4 then
			FR3ON2()
		end
		if SKN2MN2 == 5 then
			MONSTER2()
		end
		if SKN2MN2 == 6 then
			RP1002()
		end
		if SKN2MN2 == 7 then
			CHRIS2()
		end
		if SKN2MN2 == 8 then
			CHAR2()
		end
		if SKN2MN2 == 9 then
			HOME()
		end
	end
	UMRANIGAMER = -1
end

function LETSBESKINNY()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10500100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10500100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1105001001", gg.TYPE_DWORD)
	gg.toast("Blue Water Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10300300", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10300300", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1103003022", gg.TYPE_DWORD)
	gg.searchNumber("10200100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10200100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1102001004", gg.TYPE_DWORD)
	gg.toast("Beautiful Skin Diamond✓")
	gg.clearResults()
	gg.searchNumber("10800400", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10800400", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1108004027", gg.TYPE_DWORD)
	gg.toast("Glacier Skin Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Anubian Akm" },
		{ ["value"] = 10500200, ["type"] = 4 },
		{ ["lv"] = 105, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1105002011, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Anubian Akm" },
		{ ["value"] = 29500200, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1050020111, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("DP Street Art Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "concerto of love" },
		{ ["value"] = 10100800, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101008050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "concerto of love" },
		{ ["value"] = 29100800, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010080501, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Concerto Of Love Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001103", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Desert Fossil Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "lizard roar m416" },
		{ ["value"] = 10100400, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101004046, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "mag" },
		{ ["value"] = 29100400, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010040461, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "stock" },
		{ ["value"] = 20500500, ["type"] = 4 },
		{ ["lv"] = 45, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010040463, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "stock" },
		{ ["value"] = 20500200, ["type"] = 4 },
		{ ["lv"] = 52, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010040463, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "upper part" },
		{ ["value"] = 20300800, ["type"] = 4 },
		{ ["lv"] = 31, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010040462, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004046", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Glacier Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Drop the base scarl" },
		{ ["value"] = 10100300, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101003098, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "drop the base scarl" },
		{ ["value"] = 29100300, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010030981, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Drop The Base Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Mummy set" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1405623, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Yellow Mummy Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501001, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501001229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501002, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501003, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501004, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501005, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501006, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Kiss Emoji Diamond✓")
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502001, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502001093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502004, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502002, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502005, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502003, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502003093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	gg.toast("Anubian Diamond✓")
	gg.clearResults()
	gg.toast("Skinny Mixy Diamond✓")
	gg.clearResults()
end

-- -- -- -- -- -- -- -- --   Weapons Skins   -- -- -- -- -- -- -- -- --

function SKNS2()
	SKNS2MN = gg.choice(
		{
			"▪️ᴀᴡᴍ ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"▪️ᴍ249 ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"▪️ᴜᴢɪ ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"▪️ᴘᴀɴ ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"▪️ᴀᴋᴍ ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"▪️ᴍ416 ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"▪️ꜱᴄᴀʀ-ʟ ꜱᴋɪɴꜱ ᴍᴇɴᴜ",
			"️▪️ᴍ762 ꜱᴋɪɴ ᴍᴇɴᴜ",
			"▪️ᴅᴘ ꜱᴋɪɴ ᴍᴇɴᴜ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if SKNS2MN == nil then
	else
		if SKNS2MN == 1 then
			awm2()
		end
		if SKNS2MN == 2 then
			mhmhi2()
		end
		if SKNS2MN == 3 then
			uzi2()
		end
		if SKNS2MN == 4 then
			pann2()
		end
		if SKNS2MN == 5 then
			AKM2()
		end
		if SKNS2MN == 6 then
			M4162()
		end
		if SKNS2MN == 7 then
			SCARL2()
		end
		if SKNS2MN == 8 then
			M7612()
		end
		if SKNS2MN == 9 then
			DP2()
		end
		if SKNS2MN == 10 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end

function mhmhi2()
	mhmhi2MN = gg.choice(
		{
			"🔥ʙʟᴜᴇ ᴡᴀᴛᴇʀ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if mhmhi2MN == nil then
	else
		if mhmhi2MN == 1 then
			fffffff1()
		end
		if mhmhi2MN == 2 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function fffffff1()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10500100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10500100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1105001001", gg.TYPE_DWORD)
	gg.toast("Blue Water Diamond✓")
	gg.clearResults()
end

function awm2()
	awm2MN = gg.choice(
		{
			"🔥ᴜᴘɢʀᴀᴅᴇᴅ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if awm2MN == nil then
	else
		if awm2MN == 1 then
			awm223()
		end
		if awm2MN == 2 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function awm223()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10300300", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10300300", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1103003022", gg.TYPE_DWORD)
	gg.toast("Upgraded Skin Diamond✓")
end

function uzi2()
	uzi2MN = gg.choice(
		{
			"🔥ʙᴇᴀᴜᴛɪꜰᴜʟ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if uzi2MN == nil then
	else
		if uzi2MN == 1 then
			uzi1()
		end
		if uzi2MN == 2 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function uzi1()
	gg.searchNumber("10200100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10200100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1102001004", gg.TYPE_DWORD)
	gg.toast("Beautiful Skin Diamond✓")
end

function pann2()
	pann2MN = gg.choice(
		{
			"🔥ɢʟᴀᴄɪᴇʀ ꜱᴋɪɴ",
			"🔥ᴘɪɴᴋ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if pann2MN == nil then
	else
		if pann2MN == 1 then
			pnan1()
		end
		if pann2MN == 2 then
			pnan332()
		end
		if pann2MN == 3 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function pnan1()
	gg.clearResults()
	gg.searchNumber("10800400", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10800400", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1108004027", gg.TYPE_DWORD)
	gg.toast("Glacier Skin Diamond✓")
end

function pnan332()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10800400", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10800400", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1108004054", gg.TYPE_DWORD)
	gg.toast("Pink Skin Diamond✓")
end

function DP2()
	DP2MN = gg.choice(
		{
			"🔥ꜱᴛʀᴇᴇᴛ ᴀʀᴛ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if DP2MN == nil then
	else
		if DP2MN == 1 then
			DP1()
		end
		if DP2MN == 2 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function DP1()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Anubian Akm" },
		{ ["value"] = 10500200, ["type"] = 4 },
		{ ["lv"] = 105, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1105002011, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Anubian Akm" },
		{ ["value"] = 29500200, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1050020111, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("DP Street Art Diamond✓")
end

function M7612()
	M7612MN = gg.choice(
		{
			"🔥8 ʙɪᴛ ᴜɴɪᴄᴏʀɴ ꜱᴋɪɴ",
			"🔥ᴄᴏɴᴛᴄᴇʀᴛᴏ ᴏꜰ ʟᴏᴠᴇ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if M7612MN == nil then
	else
		if M7612MN == 1 then
			M76121()
		end
		if M7612MN == 2 then
			M7612222()
		end
		if M7612MN == 3 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function M76121()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Golden chicken m762" },
		{ ["value"] = 10100800, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101008026, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Golden Chicken m762" },
		{ ["value"] = 29100800, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010080261, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("8 Bit Unicorn Diamond✓")
end

function M7612222()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "concerto of love" },
		{ ["value"] = 10100800, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101008050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "concerto of love" },
		{ ["value"] = 29100800, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010080501, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Concerto Of Love Diamond✓")
end

-- -- -- -- -- -- -- -- --   AKM Skins   -- -- -- -- -- -- -- -- --

function AKM2()
	AKM2MN = gg.choice(
		{
			"🔥ᴊᴀᴄᴋ-ᴏ'-ʟᴀɴᴛᴇʀɴ ꜱᴋɪɴ",
			"🔥ᴅᴇꜱᴇʀᴛ ꜰᴏꜱꜱɪʟ ꜱᴋɪɴ",
			"🔥ᴀᴋᴍ ɢʟᴀᴄɪᴇʀ ꜱᴋɪɴ",
			"🔥ᴛʜᴇ ꜱᴇᴠᴇɴ ꜱᴇᴀꜱ ꜱᴋɪɴ",
			"🔥ɢᴏʟᴅᴇɴ ᴘɪɢʟᴇᴛ ꜱᴋɪɴ",
			"🔥ꜱᴀɴᴛᴀ ᴄʟᴀᴜꜱ ꜱᴋɪɴ",
			"🔥ʀᴏᴀʀɪɴɢ ᴛɪɢᴇʀ ꜱᴋɪɴ",
			"🔥ɪɴᴠᴀᴅᴇʀ ꜱᴋɪɴ",
			"🔥ɢʜɪʟʟɪᴇ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if AKM2MN == nil then
	else
		if AKM2MN == 1 then
			Jacko()
		end
		if AKM2MN == 2 then
			DesertFossil()
		end
		if AKM2MN == 3 then
			AKMGlacier()
		end
		if AKM2MN == 4 then
			SevenSeas()
		end
		if AKM2MN == 5 then
			Piglet()
		end
		if AKM2MN == 6 then
			SantaAK()
		end
		if AKM2MN == 7 then
			ROARING()
		end
		if AKM2MN == 8 then
			Invader()
		end
		if AKM2MN == 9 then
			GHILLLLUIE()
		end
		if AKM2MN == 10 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function Jacko()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001116", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Jack-o'-lantern Diamond✓")
end

function GHILLLLUIE()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "ghillie Akm" },
		{ ["value"] = 10100100, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101001127, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "ghillie Akm" },
		{ ["value"] = 29100100, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010011271, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Ghillie Diamond✓")
end

function DesertFossil()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001103", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Desert Fossil Diamond✓")
end

function AKMGlacier()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001089", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Glacier Diamond✓")
end

function SevenSeas()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001063", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM The Seven Seas Diamond✓")
end

function Piglet()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001030", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Golden Piglet Diamond✓")
end

function SantaAK()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001035", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Santa Claus Diamond✓")
end

function ROARING()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001068", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM ROARING TIGER Diamond✓")
end

function Invader()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101001046", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("AKM Invader Diamond✓")
end

-- -- -- -- -- -- -- -- --   M416 Skins   -- -- -- -- -- -- -- -- --

function M4162()
	M4162MN = gg.choice(
		{
			"🔥ᴛʜᴇ ꜰᴏᴏʟ (ᴊᴏᴋᴇʀ) ꜱᴋɪɴ",
			"🔥ɢʟᴀᴄɪᴇʀ ꜱᴋɪɴ",
			"🔥ʟɪᴢᴀʀᴅ ʀᴏᴀʀ ꜱᴋɪɴ",
			"🔥ᴡᴀɴᴅᴇʀᴇʀ ꜱᴋɪɴ",
			"🔥ᴄᴀʟʟ ᴏꜰ ᴛʜᴇ ᴡɪʟᴅ ꜱᴋɪɴ",
			"🔥ᴠᴀᴍᴘɪʀᴇ ꜱᴋɪɴ",
			"🔥ɢᴏʟᴅᴇɴ ᴛʀɪɢɢᴇʀ ꜱᴋɪɴ",
			"🔥ᴛᴇᴍᴘʟᴇ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if M4162MN == nil then
	else
		if M4162MN == 1 then
			FOOLM()
		end
		if M4162MN == 2 then
			M4Glacier()
		end
		if M4162MN == 3 then
			LizardMM()
		end
		if M4162MN == 4 then
			WANDM4()
		end
		if M4162MN == 5 then
			CALLOFM4()
		end
		if M4162MN == 6 then
			VAMPM4()
		end
		if M4162MN == 7 then
			GOLDM4()
		end
		if M4162MN == 8 then
			DAMNNM4()
		end
		if M4162MN == 9 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function DAMNNM4()
	Memory_offset({
		{ 101004, 4 },
		{
			101004,
			4,
			4,
		},
		{
			10100400,
			16,
			4,
		},
	}, {
		{
			1101004089,
			16,
			4,
			false,
		},
	}, 32, 4, "M416 - Temple")
	gg.toast("Temple M416 Diamond✓")
end

function FOOLM()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004062", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 The Fool ( Joker ) Diamond✓")
end

function M4Glacier()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004046", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Glacier Diamond✓")
end

function LizardMM()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004086", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Lizard Roar Diamond✓")
end

function WANDM4()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004078", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Wanderer Diamond✓")
end

function CALLOFM4()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004098", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Call Of The Wild Diamond✓")
end

function VAMPM4()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004033", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Vampire Diamond✓")
end

function GOLDM4()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.searchNumber("10100400 ", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(10)
	gg.editAll("1101004034", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("M416 Golden Trigger Diamond✓")
end

-- -- -- -- -- -- -- -- --   Scar-L Skins   -- -- -- -- -- -- -- -- --

function SCARL2()
	SCARL2MN = gg.choice(
		{
			"🔥ᴇɴᴄʜᴀɴᴛᴇᴅ ᴘᴜᴍᴘᴋɪɴ ꜱᴋɪɴ",
			"🔥ᴡᴀᴛᴇʀ ʙʟᴀꜱᴛᴇʀ ꜱᴋɪɴ",
			"🔥ᴏᴘᴇʀᴀᴛɪᴏɴ ᴛᴏᴍᴏʀʀᴏᴡ ꜱᴋɪɴ",
			"🔥ᴅʀᴏᴘ ᴛʜᴇ ʙᴀꜱᴇ ꜱᴋɪɴ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if SCARL2MN == nil then
	else
		if SCARL2MN == 1 then
			PUMPKIN()
		end
		if SCARL2MN == 2 then
			WATERBLASTER()
		end
		if SCARL2MN == 3 then
			OPERATION()
		end
		if SCARL2MN == 4 then
			DUPITBRO()
		end
		if SCARL2MN == 5 then
			SKNS2()
		end
	end
	UMRANIGAMER = -1
end

function PUMPKIN()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100300", 4, false, 536870912, 0, -1)
	gg.searchNumber("10100300", 4, false, 536870912, 0, -1)
	gg.getResults(10)
	gg.editAll("1101003070", 4)
	gg.clearResults()
	gg.toast("SCAR-L Enchanted Pumpkin Diamond✓")
end

function DUPITBRO()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Drop the base scarl" },
		{ ["value"] = 10100300, ["type"] = 4 },
		{ ["lv"] = 101, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1101003098, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "drop the base scarl" },
		{ ["value"] = 29100300, ["type"] = 4 },
		{ ["lv"] = 0, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1010030981, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Drop The Base Diamond✓")
end

function WATERBLASTER()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100300", 4, false, 536870912, 0, -1)
	gg.searchNumber("10100300", 4, false, 536870912, 0, -1)
	gg.getResults(10)
	gg.editAll("1101003057", 4)
	gg.clearResults()
	gg.toast("SCAR-L Water Blaster Diamond✓")
end

function OPERATION()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("10100300", 4, false, 536870912, 0, -1)
	gg.searchNumber("10100300", 4, false, 536870912, 0, -1)
	gg.getResults(10)
	gg.editAll("1101003080", 4)
	gg.clearResults()
	gg.toast("SCAR-L Operation Tomorrow Diamond✓")
end

-- -- -- -- -- -- -- -- --   ꜱᴘᴇᴄɪᴀʟ Outfits   -- -- -- -- -- -- -- -- --

function SPEC2()
	SPEC2MN = gg.choice(
		{
			"👚ᴏᴜᴛꜰɪᴛꜱ",
			"🎒ʙᴀᴄᴋᴘᴀᴄᴋꜱ",
			"⛑️ʜᴇʟᴍᴇᴛꜱ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if SPEC2MN == nil then
	else
		if SPEC2MN == 1 then
			OUT()
		end
		if SPEC2MN == 2 then
			BAG()
		end
		if SPEC2MN == 3 then
			HEL()
		end
		if SPEC2MN == 4 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end
function OUT()
	OUTMN = gg.choice(
		{
			"🌠ᴡɪɴᴛᴇʀ Qᴜᴇᴇɴ",
			"🌠ʏᴇʟʟᴏᴡ ᴍᴜᴍᴍʏ [ʙᴀɴᴀɴᴀ ɢᴜʏ]",
			"🌠ᴄʟᴀꜱꜱɪᴄ ꜱᴀɴᴛᴀ",
			"🌠ʀᴀᴠᴇɴ x ꜱᴜɪᴛᴇ [ɴᴇᴡ]",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if OUTMN == nil then
	else
		if OUTMN == 1 then
			OUT1()
		end
		if OUTMN == 2 then
			OUT2()
		end
		if OUTMN == 3 then
			OUT4()
		end
		if OUTMN == 4 then
			OUT5()
		end
		if OUTMN == 5 then
			SPEC2()
		end
	end
	UMRANIGAMER = -1
end
function OUT5()
	function setvalue(address, flags, value)
		DIAMOND("Modify address value(Address, value type, value to be modified)")
		local tt = {}
		tt[1] = {}
		tt[1].address = address
		tt[1].flags = flags
		tt[1].value = value
		gg.setValues(tt)
	end
	function setvalue(address, flags, value)
		PS(" Python value(Lib, value type, value to be modified)")
		local tt = {}
		tt[1] = {}
		tt[1].address = address
		tt[1].flags = flags
		tt[1].value = value
		gg.setValues(tt)
	end
	function setvalue(address, flags, value)
		local tt = {}
		tt[1] = {}
		tt[1].address = address
		tt[1].flags = flags
		tt[1].value = value
		gg.setValues(tt)
	end
	function split(szFullString, szSeparator)
		local nFindStartIndex = 1
		local nSplitIndex = 1
		local nSplitArray = {}
		while true do
			local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
			if not nFindLastIndex then
				nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
				break
			end
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
			nFindStartIndex = nFindLastIndex + string.len(szSeparator)
			nSplitIndex = nSplitIndex + 1
		end
		return nSplitArray
	end
	function xgxc(szpy, qmxg)
		for x = 1, #qmxg do
			xgpy = szpy + qmxg[x]["offset"]
			xglx = qmxg[x]["type"]
			xgsz = qmxg[x]["value"]
			xgdj = qmxg[x]["freeze"]
			if xgdj == nil or xgdj == "" then
				gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
			else
				gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
			end
			xgsl = xgsl + 1
			xgjg = true
		end
	end
	function xqmnb(qmnb)
		gg.clearResults()
		gg.setRanges(qmnb[1]["memory"])
		gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "蠑蜷ｯ螟ｱ雍･")
		else
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			if gg.getResultCount() == 0 then
				gg.toast(qmnb[2]["name"] .. "蠑蜷ｯ螟ｱ雍･")
			else
				sl = gg.getResults(999999)
				sz = gg.getResultCount()
				xgsl = 0
				if sz > 999999 then
					sz = 999999
				end
				for i = 1, sz do
					pdsz = true
					for v = 4, #qmnb do
						if pdsz == true then
							pysz = {}
							pysz[1] = {}
							pysz[1].address = sl[i].address + qmnb[v]["offset"]
							pysz[1].flags = qmnb[v]["type"]
							szpy = gg.getValues(pysz)
							pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
							szpd = split(pdpd, ";")
							tzszpd = szpd[1]
							pyszpd = szpd[2]
							if tzszpd == pyszpd then
								pdjg = true
								pdsz = true
							else
								pdjg = false
								pdsz = false
							end
						end
					end
					if pdjg == true then
						szpy = sl[i].address
						xgxc(szpy, qmxg)
					end
				end
				if xgjg == true then
					gg.toast(
						qmnb[2]["name"]
							.. "蠑蜷ｯ謌仙粥�御ｸ蜈ｱ菫ｮ謾ｹ"
							.. xgsl
							.. "譚｡謨ｰ謐ｮ"
					)
				else
					gg.toast(qmnb[2]["name"] .. "譛ｪ謳懃ｴ｢蛻ｰ謨ｰ謐ｮ�悟ｼ蜷ｯ螟ｱ雍･")
				end
			end
		end
	end
	function SearchWrite(Search, Write, Type)
		gg.clearResults()
		gg.setVisible(false)
		gg.searchNumber(Search[1][1], Type)
		local count = gg.getResultCount()
		local result = gg.getResults(count)
		gg.clearResults()
		local data = {}
		local base = Search[1][2]
		if count > 0 then
			for i, v in ipairs(result) do
				v.isUseful = true
			end
			for k = 2, #Search do
				local tmp = {}
				local offset = Search[k][2] - base
				local num = Search[k][1]
				for i, v in ipairs(result) do
					tmp[#tmp + 1] = {}
					tmp[#tmp].address = v.address + offset
					tmp[#tmp].flags = v.flags
				end
				tmp = gg.getValues(tmp)
				for i, v in ipairs(tmp) do
					if tostring(v.value) ~= tostring(num) then
						result[i].isUseful = false
					end
				end
			end
			for i, v in ipairs(result) do
				if v.isUseful then
					data[#data + 1] = v.address
				end
			end
			if #data > 0 then
				local t = {}
				local base = Search[1][2]
				for i = 1, #data do
					for k, w in ipairs(Write) do
						offset = w[2] - base
						t[#t + 1] = {}
						t[#t].address = data[i] + offset
						t[#t].flags = Type
						t[#t].value = w[1]
						if w[3] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						end
					end
				end
				gg.setValues(t)
				gg.toast("蠑蜷ｯ謌仙粥�御ｸ蜈ｱ菫ｮ謾ｹ" .. #t .. "譚｡謨ｰ謐ｮ")
				gg.addListItems(t)
			else
				gg.toast("譛ｪ謳懃ｴ｢蛻ｰ謨ｰ謐ｮ�悟ｼ蜷ｯ螟ｱ雍･", false)
				return false
			end
		else
			gg.toast("Not Found")
			return false
		end
	end
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "DIAMOND X Suit Set" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1405870, ["offset"] = -0, ["type"] = 4 } }
	xqmnb(qmnb)
	gg.clearResults()
	gg.sleep(1000)
	gg.toast("Raven X Suite Diamond✓")
end
function OUT1()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Mummy set" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1405706, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Winter Queen Diamond✓")
end
function OUT2()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Mummy set" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1405623, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Yellow Mummy Diamond✓")
end
function OUT4()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Mummy set" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1405004, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Classic Santa Diamond✓")
end
function BAG()
	BAGMN = gg.choice(
		{
			"💰ᴡɪɴᴛᴇʀ Qᴜᴇᴇɴ",
			"💰ʙʀɪʟʟɪᴀɴᴛ ᴀɴɴɪᴠᴇʀꜱᴀʀʏ",
			"💰ᴋɪꜱꜱ ᴇᴍᴏᴊɪ",
			"💰ʀᴀᴍᴀᴅᴀɴ ɢɪꜰᴛ",
			"💰ʀᴀᴠᴇɴ x",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if BAGMN == nil then
	else
		if BAGMN == 1 then
			BAG1()
		end
		if BAGMN == 2 then
			BAG2()
		end
		if BAGMN == 3 then
			BAG3()
		end
		if BAGMN == 4 then
			BAG4()
		end
		if BAGMN == 5 then
			BAG5()
		end
		if BAGMN == 6 then
			SPEC2()
		end
	end
	UMRANIGAMER = -1
end
function BAG5()
	function split(szFullString, szSeparator)
		local nFindStartIndex = 1
		local nSplitIndex = 1
		local nSplitArray = {}
		while true do
			local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
			if not nFindLastIndex then
				nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
				break
			end
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
			nFindStartIndex = nFindLastIndex + string.len(szSeparator)
			nSplitIndex = nSplitIndex + 1
		end
		return nSplitArray
	end
	function xgxc(szpy, qmxg)
		for x = 1, #qmxg do
			xgpy = szpy + qmxg[x]["offset"]
			xglx = qmxg[x]["type"]
			xgsz = qmxg[x]["value"]
			xgdj = qmxg[x]["freeze"]
			if xgdj == nil or xgdj == "" then
				gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
			else
				gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
			end
			xgsl = xgsl + 1
			xgjg = true
		end
	end
	function xqmnb(qmnb)
		gg.clearResults()
		gg.setRanges(qmnb[1]["memory"])
		gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			if gg.getResultCount() == 0 then
				gg.toast(qmnb[2]["name"] .. "开启失败")
			else
				sl = gg.getResults(999999)
				sz = gg.getResultCount()
				xgsl = 0
				if sz > 999999 then
					sz = 999999
				end
				for i = 1, sz do
					pdsz = true
					for v = 4, #qmnb do
						if pdsz == true then
							pysz = {}
							pysz[1] = {}
							pysz[1].address = sl[i].address + qmnb[v]["offset"]
							pysz[1].flags = qmnb[v]["type"]
							szpy = gg.getValues(pysz)
							pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
							szpd = split(pdpd, ";")
							tzszpd = szpd[1]
							pyszpd = szpd[2]
							if tzszpd == pyszpd then
								pdjg = true
								pdsz = true
							else
								pdjg = false
								pdsz = false
							end
						end
					end
					if pdjg == true then
						szpy = sl[i].address
						xgxc(szpy, qmxg)
					end
				end
				if xgjg == true then
					gg.toast(qmnb[2]["name"] .. " Edited: " .. xgsl .. "")
				else
					gg.toast(qmnb[2]["name"] .. "  Nothing found!!")
				end
			end
		end
	end
	function SearchWrite(Search, Write, Type)
		gg.clearResults()
		gg.setVisible(false)
		gg.searchNumber(Search[1][1], Type)
		local count = gg.getResultCount()
		local result = gg.getResults(count)
		gg.clearResults()
		local data = {}
		local base = Search[1][2]
		if count > 0 then
			for i, v in ipairs(result) do
				v.isUseful = true
			end
			for k = 2, #Search do
				local tmp = {}
				local offset = Search[k][2] - base
				local num = Search[k][1]
				for i, v in ipairs(result) do
					tmp[#tmp + 1] = {}
					tmp[#tmp].address = v.address + offset
					tmp[#tmp].flags = v.flags
				end
				tmp = gg.getValues(tmp)
				for i, v in ipairs(tmp) do
					if tostring(v.value) ~= tostring(num) then
						result[i].isUseful = false
					end
				end
			end
			for i, v in ipairs(result) do
				if v.isUseful then
					data[#data + 1] = v.address
				end
			end
			if #data > 0 then
				local t = {}
				local base = Search[1][2]
				for i = 1, #data do
					for k, w in ipairs(Write) do
						offset = w[2] - base
						t[#t + 1] = {}
						t[#t].address = data[i] + offset
						t[#t].flags = Type
						t[#t].value = w[1]
						if w[3] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						end
					end
				end
				gg.setValues(t)
				gg.toast(" Edited: " .. #t .. "")
				gg.addListItems(t)
			else
				gg.toast("  Nothing found!", false)
				return false
			end
		else
			gg.toast("Not Found")
			return false
		end
	end
	function split(szFullString, szSeparator)
		local nFindStartIndex = 1
		local nSplitIndex = 1
		local nSplitArray = {}
		while true do
			local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
			if not nFindLastIndex then
				nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
				break
			end
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
			nFindStartIndex = nFindLastIndex + string.len(szSeparator)
			nSplitIndex = nSplitIndex + 1
		end
		return nSplitArray
	end
	function xgxc(szpy, qmxg)
		for x = 1, #qmxg do
			xgpy = szpy + qmxg[x]["offset"]
			xglx = qmxg[x]["type"]
			xgsz = qmxg[x]["value"]
			xgdj = qmxg[x]["freeze"]
			if xgdj == nil or xgdj == "" then
				gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
			else
				gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
			end
			xgsl = xgsl + 1
			xgjg = true
		end
	end
	function xqmnb(qmnb)
		gg.clearResults()
		gg.setRanges(qmnb[1]["memory"])
		gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			if gg.getResultCount() == 0 then
				gg.toast(qmnb[2]["name"] .. "开启失败")
			else
				sl = gg.getResults(999999)
				sz = gg.getResultCount()
				xgsl = 0
				if sz > 999999 then
					sz = 999999
				end
				for i = 1, sz do
					pdsz = true
					for v = 4, #qmnb do
						if pdsz == true then
							pysz = {}
							pysz[1] = {}
							pysz[1].address = sl[i].address + qmnb[v]["offset"]
							pysz[1].flags = qmnb[v]["type"]
							szpy = gg.getValues(pysz)
							pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
							szpd = split(pdpd, ";")
							tzszpd = szpd[1]
							pyszpd = szpd[2]
							if tzszpd == pyszpd then
								pdjg = true
								pdsz = true
							else
								pdjg = false
								pdsz = false
							end
						end
					end
					if pdjg == true then
						szpy = sl[i].address
						xgxc(szpy, qmxg)
					end
				end
				if xgjg == true then
					gg.toast(qmnb[2]["name"] .. " Edited: " .. xgsl .. "")
				else
					gg.toast(qmnb[2]["name"] .. "  Nothing found!!")
				end
			end
		end
	end
	function SearchWrite(Search, Write, Type)
		gg.clearResults()
		gg.setVisible(false)
		gg.searchNumber(Search[1][1], Type)
		local count = gg.getResultCount()
		local result = gg.getResults(count)
		gg.clearResults()
		local data = {}
		local base = Search[1][2]
		if count > 0 then
			for i, v in ipairs(result) do
				v.isUseful = true
			end
			for k = 2, #Search do
				local tmp = {}
				local offset = Search[k][2] - base
				local num = Search[k][1]
				for i, v in ipairs(result) do
					tmp[#tmp + 1] = {}
					tmp[#tmp].address = v.address + offset
					tmp[#tmp].flags = v.flags
				end
				tmp = gg.getValues(tmp)
				for i, v in ipairs(tmp) do
					if tostring(v.value) ~= tostring(num) then
						result[i].isUseful = false
					end
				end
			end
			for i, v in ipairs(result) do
				if v.isUseful then
					data[#data + 1] = v.address
				end
			end
			if #data > 0 then
				local t = {}
				local base = Search[1][2]
				for i = 1, #data do
					for k, w in ipairs(Write) do
						offset = w[2] - base
						t[#t + 1] = {}
						t[#t].address = data[i] + offset
						t[#t].flags = Type
						t[#t].value = w[1]
						if w[3] == true then
							local item = {}
							item[#item + 1] = t[#t]
							item[#item].freeze = true
							gg.addListItems(item)
						end
					end
				end
				gg.setValues(t)
				gg.toast(" Edited: " .. #t .. "")
				gg.addListItems(t)
			else
				gg.toast("  Nothing found!", false)
				return false
			end
		else
			gg.toast("Not Found")
			return false
		end
	end
	function split(szFullString, szSeparator)
		local nFindStartIndex = 1
		local nSplitIndex = 1
		local nSplitArray = {}
		while true do
			local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
			if not nFindLastIndex then
				nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
				break
			end
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
			nFindStartIndex = nFindLastIndex + string.len(szSeparator)
			nSplitIndex = nSplitIndex + 1
		end
		return nSplitArray
	end
	function xgxc(szpy, qmxg)
		for x = 1, #qmxg do
			xgpy = szpy + qmxg[x]["offset"]
			xglx = qmxg[x]["type"]
			xgsz = qmxg[x]["value"]
			xgdj = qmxg[x]["freeze"]
			if xgdj == nil or xgdj == "" then
				gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
			else
				gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
			end
			xgsl = xgsl + 1
			xgjg = true
		end
	end
	function xqmnb(qmnb)
		gg.clearResults()
		gg.setVisible(false)
		gg.setRanges(qmnb[1]["memory"])
		gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. " Failed")
		else
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			xxx = gg.getResultCount()
			if gg.getResultCount() == 0 then
				gg.toast(qmnb[2]["name"] .. " Failed")
			else
				sl = gg.getResults(999999)
				sz = gg.getResultCount()
				xgsl = 0
				if sz > 999999 then
					sz = 999999
				end
				for i = 1, sz do
					pdsz = true
					for v = 4, #qmnb do
						if pdsz == true then
							pysz = {}
							pysz[1] = {}
							pysz[1].address = sl[i].address + qmnb[v]["offset"]
							pysz[1].flags = qmnb[v]["type"]
							szpy = gg.getValues(pysz)
							pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
							szpd = split(pdpd, ";")
							tzszpd = szpd[1]
							pyszpd = szpd[2]
							if tzszpd == pyszpd then
								pdjg = true
								pdsz = true
							else
								pdjg = false
								pdsz = false
							end
						end
					end
					if pdjg == true then
						szpy = sl[i].address
						xgxc(szpy, qmxg)
					end
				end
				if xgjg == true then
					gg.toast(qmnb[2]["name"] .. "\nFound: " .. xxx .. " Edited: " .. xgsl .. "")
				else
					gg.toast(qmnb[2]["name"] .. " Failed")
				end
			end
		end
		gg.clearResults()
	end
	Memory_offset = function(Search, Write, nc, Type, name)
		gg.clearResults()
		gg.setRanges(nc)
		gg.setVisible(false)
		lx = Search[1][2]
		gg.searchNumber(Search[1][1], lx)
		local count = gg.getResultCount()
		local result = gg.getResults(count)
		gg.clearResults()
		local data = {}
		if count > 0 then
			gg.toast("ᖴOᑌᑎᗪ: " .. count .. " ")
			for i, v in ipairs(result) do
				v.isUseful = true
			end
			for k = 2, #Search do
				local tmp = {}
				local num = Search[k][1]
				if Search[k][3] ~= nil then
					lx = Search[k][3]
				else
					lx = Type
				end
				for i, v in ipairs(result) do
					tmp[#tmp + 1] = {}
					tmp[#tmp].address = v.address + Search[k][2]
					tmp[#tmp].flags = lx
				end
				tmp = gg.getValues(tmp)
				for i, v in ipairs(tmp) do
					if tostring(v.value) ~= tostring(num) then
						result[i].isUseful = false
					end
				end
			end
			for i, v in ipairs(result) do
				if v.isUseful then
					data[#data + 1] = v.address
				end
			end
			if #data > 0 then
				local t = {}
				for i = 1, #data do
					for k, w in ipairs(Write) do
						if w[3] ~= nil then
							lx = w[3]
						else
							lx = Type
						end
						t[#t + 1] = {}
						t[#t].address = data[i] + w[2]
						t[#t].flags = lx
						if (w[1] ~= nil) and (w[1] ~= false) then
							t[#t].value = w[1]
							if w[4] == true then
								local item = {}
								item[#item + 1] = t[#t]
								item[#item].freeze = true
								gg.addListItems(item)
							else
								gg.setValues(t)
							end
						end
					end
				end
				gg.loadResults(t)
				gg.toast(name .. " Edited: " .. #t .. "")
			else
				gg.toast(name .. " Failed")
			end
		else
			gg.toast(name .. " Failed")
		end
		gg.clearResults()
	end
	function ts(ts)
		if ts then
			gg.toast(ts)
			return true
		else
			gg.toast("nil")
			return false
		end
	end
	function getso(name)
		return gg.getRangesList(name)[1].start
	end
	function Memory_modify(add, ta)
		addr = add
		t = {}
		for i = 1, #ta do
			t[i] = {}
			t[i].address = addr + ta[i][3]
			t[i].flags = ta[i][2]
			t[i].value = ta[i][1]
		end
		gg.setValues(t)
	end
	function split(szFullString, szSeparator)
		local nFindStartIndex = 1
		local nSplitIndex = 1
		local nSplitArray = {}
		while true do
			local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
			if not nFindLastIndex then
				nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
				break
			end
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
			nFindStartIndex = nFindLastIndex + string.len(szSeparator)
			nSplitIndex = nSplitIndex + 1
		end
		return nSplitArray
	end
	function xgxc(szpy, qmxg)
		for x = 1, #qmxg do
			xgpy = szpy + qmxg[x]["offset"]
			xglx = qmxg[x]["type"]
			xgsz = qmxg[x]["value"]
			xgdj = qmxg[x]["freeze"]
			if xgdj == nil or xgdj == "" then
				gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
			else
				gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
			end
			xgsl = xgsl + 1
			xgjg = true
		end
	end
	function xqmnb(qmnb)
		gg.clearResults()
		gg.setVisible(false)
		gg.setRanges(qmnb[1]["memory"])
		gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. " Failed")
		else
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
			xxx = gg.getResultCount()
			if gg.getResultCount() == 0 then
				gg.toast(qmnb[2]["name"] .. " Failed")
			else
				sl = gg.getResults(999999)
				sz = gg.getResultCount()
				xgsl = 0
				if sz > 999999 then
					sz = 999999
				end
				for i = 1, sz do
					pdsz = true
					for v = 4, #qmnb do
						if pdsz == true then
							pysz = {}
							pysz[1] = {}
							pysz[1].address = sl[i].address + qmnb[v]["offset"]
							pysz[1].flags = qmnb[v]["type"]
							szpy = gg.getValues(pysz)
							pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
							szpd = split(pdpd, ";")
							tzszpd = szpd[1]
							pyszpd = szpd[2]
							if tzszpd == pyszpd then
								pdjg = true
								pdsz = true
							else
								pdjg = false
								pdsz = false
							end
						end
					end
					if pdjg == true then
						szpy = sl[i].address
						xgxc(szpy, qmxg)
					end
				end
				if xgjg == true then
					gg.toast(qmnb[2]["name"] .. "\nFound: " .. xxx .. " Edited: " .. xgsl .. "")
				else
					gg.toast(qmnb[2]["name"] .. " Failed")
				end
			end
		end
		gg.clearResults()
	end
	Memory_offset = function(Search, Write, nc, Type, name)
		gg.clearResults()
		gg.setRanges(nc)
		gg.setVisible(false)
		lx = Search[1][2]
		gg.searchNumber(Search[1][1], lx)
		local count = gg.getResultCount()
		local result = gg.getResults(count)
		gg.clearResults()
		local data = {}
		if count > 0 then
			gg.toast("ᖴOᑌᑎᗪ: " .. count .. " ")
			for i, v in ipairs(result) do
				v.isUseful = true
			end
			for k = 2, #Search do
				local tmp = {}
				local num = Search[k][1]
				if Search[k][3] ~= nil then
					lx = Search[k][3]
				else
					lx = Type
				end
				for i, v in ipairs(result) do
					tmp[#tmp + 1] = {}
					tmp[#tmp].address = v.address + Search[k][2]
					tmp[#tmp].flags = lx
				end
				tmp = gg.getValues(tmp)
				for i, v in ipairs(tmp) do
					if tostring(v.value) ~= tostring(num) then
						result[i].isUseful = false
					end
				end
			end
			for i, v in ipairs(result) do
				if v.isUseful then
					data[#data + 1] = v.address
				end
			end
			if #data > 0 then
				local t = {}
				for i = 1, #data do
					for k, w in ipairs(Write) do
						if w[3] ~= nil then
							lx = w[3]
						else
							lx = Type
						end
						t[#t + 1] = {}
						t[#t].address = data[i] + w[2]
						t[#t].flags = lx
						if (w[1] ~= nil) and (w[1] ~= false) then
							t[#t].value = w[1]
							if w[4] == true then
								local item = {}
								item[#item + 1] = t[#t]
								item[#item].freeze = true
								gg.addListItems(item)
							else
								gg.setValues(t)
							end
						end
					end
				end
				gg.loadResults(t)
				gg.toast(name .. " Edited: " .. #t .. "")
			else
				gg.toast(name .. " Failed")
			end
		else
			gg.toast(name .. " Failed")
		end
		gg.clearResults()
	end
	function ts(ts)
		if ts then
			gg.toast(ts)
			return true
		else
			gg.toast("nil")
			return false
		end
	end
	function getso(name)
		return gg.getRangesList(name)[1].start
	end
	function Memory_modify(add, ta)
		addr = add
		t = {}
		for i = 1, #ta do
			t[i] = {}
			t[i].address = addr + ta[i][3]
			t[i].flags = ta[i][2]
			t[i].value = ta[i][1]
		end
		gg.setValues(t)
	end
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Raven Bag Part 1" },
		{ ["value"] = 501001, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501001220, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Raven Bag Part 2" },
		{ ["value"] = 501002, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501002220, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Raven Bag Part 3" },
		{ ["value"] = 501003, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003220, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Raven Bag Part 4" },
		{ ["value"] = 501004, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501002220, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Raven Bag Part 5" },
		{ ["value"] = 501005, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003220, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Raven Bag Part 6" },
		{ ["value"] = 501006, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003220, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	gg.toast("Raven X Diamond✓")
end
function BAG4()
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Illusion Judge Backpack" },
		{ ["value"] = 501001, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501001043, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Illusion Judge Backpack" },
		{ ["value"] = 501002, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501002043, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Illusion Judge Backpack" },
		{ ["value"] = 501003, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003043, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Illusion Judge Backpack" },
		{ ["value"] = 501004, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003043, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Illusion Judge Backpack" },
		{ ["value"] = 501005, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003043, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Illusion Judge Backpack" },
		{ ["value"] = 501006, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	qmxg = { { ["value"] = 1501003043, ["offset"] = 0, ["type"] = 4 } }
	xqmnb(qmnb)
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	gg.toast("Ramadan Gift Diamond✓")
end
function BAG1()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501001, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501001216, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501002, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002216, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501003, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003216, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501004, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002216, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501005, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003216, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501006, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003216, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Winter Queen Diamond✓")
end
function BAG2()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501001, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501001045, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501002, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002045, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501003, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003045, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501004, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002045, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501005, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003045, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501006, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003045, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Brilliant Anniversary Diamond✓")
end
function BAG3()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501001, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501001229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501002, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501003, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501004, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501002229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501005, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Backpack" },
		{ ["value"] = 501006, ["type"] = 4 },
		{ ["lv"] = 501, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1501003229, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.toast("Kiss Emoji Diamond✓")
end
function HEL()
	HELMN = gg.choice(
		{
			"🎧ᴄᴀꜱᴛ ɪʀᴏɴ",
			"🎧ꜱᴛʏʟɪꜱʜ ꜱᴀɴᴛᴀ",
			"🎧ᴀɴᴜʙɪᴀɴ [ʙᴇꜱᴛ]",
			"🎧ɢʟᴀᴄɪᴇʀ [ᴀᴡᴇꜱᴏᴍᴇ]",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if HELMN == nil then
	else
		if HELMN == 1 then
			HEL1()
		end
		if HELMN == 2 then
			HEL2()
		end
		if HELMN == 3 then
			HEL3()
		end
		if HELMN == 4 then
			HEL4()
		end
		if HELMN == 5 then
			SPEC2()
		end
	end
	UMRANIGAMER = -1
end
function HEL1()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502001, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502001050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502004, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502002, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502005, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502003, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502003050, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	gg.toast("Cast Iron Diamond✓")
end
function HEL2()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502001, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502001030, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502004, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002030, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502002, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002030, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502005, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002030, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502003, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502003030, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	gg.toast("Stylish Santa Diamond✓")
end
function HEL3()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502001, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502001093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502004, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502002, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502005, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502003, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502003093, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	gg.toast("Anubian Diamond✓")
end
function HEL4()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502001, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502001023, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502004, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002023, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502002, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002023, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502005, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502002023, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Helmet" },
		{ ["value"] = 502003, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = -4, ["type"] = 4 },
	}
	gg.setVisible(false)
	qmxg = {
		{ ["value"] = 1502003023, ["offset"] = 0, ["type"] = 4 },
	}
	gg.setVisible(false)
	xqmnb(qmnb)
	gg.setVisible(false)
	gg.clearResults()
	gg.setVisible(false)
	gg.toast("Glacier Diamond✓")
end

-- -- -- -- -- -- -- -- --   ᴘʜᴀʀᴀᴏʜ Outfits   -- -- -- -- -- -- -- -- --

function FR3ON2()
	FR3ON2MN = gg.choice(
		{
			"👑ɢᴏʟᴅᴇɴ ᴘʜᴀʀᴀᴏʜ x-ꜱᴜɪᴛ",
			"👑ᴅɪᴠɪɴᴇ ᴀᴄᴏʟʏᴛᴇ ꜱᴜɪᴛ",
			"👑ᴡɪʟʟ ᴏꜰ ʜᴏʀᴜꜱ ꜱᴜɪᴛ",
			"👑ᴡᴀʀʀɪᴏʀ ᴏꜰ ɴᴜᴛ ꜱᴜɪᴛ",
			"👑ᴡᴀʀʀɪᴏʀ ᴏꜰ ʀᴀ ꜱᴜɪᴛ",
			"👑ᴜɴᴅᴇʀᴡᴏʀʟᴅ ɢᴜɪᴅᴇ ꜱᴜɪᴛ",
			"👑ᴀɴᴜʙɪᴀɴ ᴍᴀɢɪꜱᴛʀᴀᴛᴇ ꜱᴜɪᴛ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if FR3ON2MN == nil then
	else
		if FR3ON2MN == 1 then
			GoldenPharaoh()
		end
		if FR3ON2MN == 2 then
			DivineAcolyte()
		end
		if FR3ON2MN == 3 then
			WillofHorus()
		end
		if FR3ON2MN == 4 then
			WarriorOfNut()
		end
		if FR3ON2MN == 5 then
			WarriorOfRa()
		end
		if FR3ON2MN == 6 then
			UnderworldGuide()
		end
		if FR3ON2MN == 7 then
			AnubianMagistrate()
		end
		if FR3ON2MN == 8 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end

function GoldenPharaoh()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Golden Pharaoh X-Suit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405628, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Golden Pharaoh X-Suit Diamond✓")
end

function DivineAcolyte()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Divine Acolyte Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405585, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Divine Acolyte Diamond✓")
end

function WillofHorus()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Divine Acolyte Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405584, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Will of Horus Diamond✓")
end

function WarriorOfRa()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Warrior Of Ra Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405625, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Warrior Of Ra Suit Diamond✓")
end

function WarriorOfNut()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Warrior Of Nut Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405624, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Warrior Of Nut Suit Diamond✓")
end

function UnderworldGuide()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Underworld Guide Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405623, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Underworld Guide Suit Diamond✓")
end

function AnubianMagistrate()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "The Anubian Magistrate Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405632, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("The Anubian Magistrate Suit Diamond✓")
end

-- -- -- -- -- -- -- -- --   ᴀɴɪᴍᴀʟꜱ ᴀɴᴅ ᴍᴏɴꜱᴛᴇʀꜱ Outfits   -- -- -- -- -- -- -- -- --

function MONSTER2()
	MONSTER2MN = gg.choice(
		{
			"👽ɢᴏᴅᴢɪʟʟᴀ ꜱᴜɪᴛ",
			"👽ʏᴇᴛɪ ꜱᴜɪᴛ",
			"👽ᴍᴇʀʀʏ ꜱᴛᴇɢᴏꜱᴀᴜʀᴜꜱ ꜱᴇᴛ",
			"👽ʟᴏʙꜱᴛᴇʀ ꜱᴜɪᴛ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if MONSTER2MN == nil then
	else
		if MONSTER2MN == 1 then
			Godzilla()
		end
		if MONSTER2MN == 2 then
			Yeti()
		end
		if MONSTER2MN == 3 then
			Merry()
		end
		if MONSTER2MN == 4 then
			Lobster()
		end
		if MONSTER2MN == 5 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end

function Godzilla()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Godzilla Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405186, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Godzilla Suit Diamond✓")
end

function Yeti()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Yeti Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405001, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Yeti Suit Diamond✓")
end

function Merry()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Merry Stegosaurus Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405558, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Merry Stegosaurus Suit Diamond✓")
end

function Lobster()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Lobster Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405401, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Lobster Suit Diamond✓")
end

-- -- -- -- -- -- -- -- --   Royal Pass Outfits   -- -- -- -- -- -- -- -- --

function RP1002()
	RP1002MN = gg.choice(
		{
			"🎖ɴɪɢʜᴛ ᴛᴇʀʀᴏʀ ꜱᴜɪᴛ ꜱ16",
			"🎖ᴀᴠɪᴀɴ ᴛʏʀᴀɴᴛ ꜱᴜɪᴛ ꜱ14",
			"🎖ᴅʀᴀᴄᴏɴɪᴀɴ ᴄʜᴀᴍᴘɪᴏɴ ꜱᴜɪᴛ ꜱ9",
			"🎖ʙʀᴏɴᴢᴇ ᴀʀᴍᴏʀ ꜱᴜɪᴛ ꜱ8",
			"🎖ʙʀɪʟʟɪᴀɴᴛ ᴀɴɴɪᴠᴇʀꜱᴀʀʏ ꜱᴜɪᴛ ꜱ6",
			"🎖ʀᴏᴀʀɪɴɢ ᴅʀᴀɢᴏɴ ꜱᴜɪᴛ ꜱ5",
			"🎖ᴅʀᴀɢᴏɴ ʜᴜɴᴛᴇʀ ꜱᴜɪᴛ ꜱ5",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if RP1002MN == nil then
	else
		if RP1002MN == 1 then
			NightTerror()
		end
		if RP1002MN == 2 then
			AvianTyrant()
		end
		if RP1002MN == 3 then
			DraconianChampion()
		end
		if RP1002MN == 4 then
			BronzeArmor()
		end
		if RP1002MN == 5 then
			BAnniversary()
		end
		if RP1002MN == 6 then
			RoaringDragon()
		end
		if RP1002MN == 7 then
			DragonHunter()
		end
		if RP1002MN == 8 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end

function NightTerror()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Night Terror Step1 Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405728, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Night Terror Step2 Outfit" },
		{ ["value"] = 502001, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1402684, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Night Terror Step3 Outfit" },
		{ ["value"] = 502002, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1402684, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Night Terror Step4 Outfit" },
		{ ["value"] = 502003, ["type"] = 4 },
		{ ["lv"] = 502, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1402684, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Night Terror Suit Diamond✓")
end

function AvianTyrant()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Avian Tyrant Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405590, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Avian Tyrant Suit Diamond✓")
end

function DraconianChampion()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Draconian Champion Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405302, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Draconian Champion Suit Diamond✓")
end

function BronzeArmor()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Bronze Armor Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405235, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Bronze Armor Suit Diamond✓")
end

function RoaringDragon()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Roaring Dragon Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405041, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Roaring Dragon Suit Diamond✓")
end

function DragonHunter()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Dragon Hunter Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405042, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Dragon Hunter Suit Diamond✓")
end

function BAnniversary()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Brilliant Anniversary Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405096, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Brilliant Anniversary Suit Diamond✓")
end

-- -- -- -- -- -- -- -- --   ᴄʜʀɪꜱᴛᴍᴀꜱ Outfits   -- -- -- -- -- -- -- -- --

function CHRIS2()
	CHRIS2MN = gg.choice(
		{
			"🎄ᴄʜᴀʀᴍɪɴɢ ʀᴇɪɴᴅᴇᴇʀ ꜱᴜɪᴛ",
			"🎄ᴄʟᴀꜱꜱɪᴄ ꜱᴀɴᴛᴀ ꜱᴜɪᴛ",
			"🎄ꜱᴛʏʟɪꜱʜ ꜱᴀɴᴛᴀ ꜱᴜɪᴛ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈Lucifer Mods ??〙🔸♔\n🔸 Telegram ⟮ @Lucifer Mods ⟯ Lucifer Mods 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if CHRIS2MN == nil then
	else
		if CHRIS2MN == 1 then
			CharmingReindeer()
		end
		if CHRIS2MN == 2 then
			ClassicSanta()
		end
		if CHRIS2MN == 3 then
			StylishSanta()
		end
		if CHRIS2MN == 4 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end

function CharmingReindeer()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Charming Reindeer Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405012, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Charming Reindeer Suit Diamond✓")
end

function ClassicSanta()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Charming Reindeer Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405004, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Classic Santa Suit Diamond✓")
end

function StylishSanta()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Stylish Santa Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405013, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Stylish Santa Suit Diamond✓")
end

-- -- -- -- -- -- -- -- --   Characters Outfits   -- -- -- -- -- -- -- -- --

function CHAR2()
	CHAR2MN = gg.choice(
		{
			"😈‍ᴍɪʟʟᴇʀ ᴄʜᴀʀᴀᴄᴛᴇʀ [ᴍᴇᴛʀᴏ] v1",
			"😈‍ᴍɪʟʟᴇʀ ᴄʜᴀʀᴀᴄᴛᴇʀ [ᴍᴇᴛʀᴏ] v2",
			"🧛‍ɢᴀᴄᴋᴛ-ᴋᴀʀᴍᴀ ᴄʜᴀʀᴀᴄᴛᴇʀ v1",
			"🧛‍ɢᴀᴄᴋᴛ-ᴋᴀʀᴍᴀ ᴄʜᴀʀᴀᴄᴛᴇʀ v2",
			"🧟‍ᴄʟᴀɪʀᴇ ʀᴇᴅꜰɪᴇʟᴅ ᴄʜᴀʀᴀᴄᴛᴇʀ",
			"🧟‍ʟᴇᴏɴ ꜱ. ᴋᴇɴɴᴇᴅʏ ᴄʜᴀʀᴀᴄᴛᴇʀ",
			"☠️ᴘᴜᴘᴘᴇᴛ ᴍᴀꜱᴛᴇʀ ᴀɴᴅʏ ꜱᴜɪᴛ",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if CHAR2MN == nil then
	else
		if CHAR2MN == 1 then
			Miller1()
		end
		if CHAR2MN == 2 then
			Miller2()
		end
		if CHAR2MN == 3 then
			KoreanCharacter1()
		end
		if CHAR2MN == 4 then
			KoreanCharacter2()
		end
		if CHAR2MN == 5 then
			CLAIREREDFIELD()
		end
		if CHAR2MN == 6 then
			LEON()
		end
		if CHAR2MN == 7 then
			ANDY()
		end
		if CHAR2MN == 8 then
			SKN2()
		end
	end
	UMRANIGAMER = -1
end

function Miller1()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Miller Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405734, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Miller Character Diamond✓")
end

function Miller2()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Miller v2 Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405733, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Miller Character Diamond✓")
end

function KoreanCharacter1()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Gackt Karma Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405503, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("ɢᴀᴄᴋᴛ-ᴋᴀʀᴍᴀ Character Diamond✓")
end

function KoreanCharacter2()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Gackt Karma v2 Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405504, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("ɢᴀᴄᴋᴛ-ᴋᴀʀᴍᴀ Character Diamond✓")
end

function CLAIREREDFIELD()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "CLAIRE REDFIELD Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405063, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("CLAIRE REDFIELD Character Diamond✓")
end

function LEON()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "LEON KENNEDY Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405065, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("LEON S. KENNEDY Character Diamond✓")
end

function ANDY()
	gg.clearResults()
	qmnb = {
		{ ["memory"] = 32 },
		{ ["name"] = "Puppet Master Outfit" },
		{ ["value"] = 1400129, ["type"] = 4 },
		{ ["lv"] = 519, ["offset"] = 4, ["type"] = 4 },
	}
	qmxg = {
		{ ["value"] = 1405569, ["offset"] = 0, ["type"] = 4 },
	}
	xqmnb(qmnb)
	gg.clearResults()
	gg.toast("Puppet Master Andy Suit Diamond✓")
end

function EHAUM()
	EHAUMMN111 = gg.choice(
		{
			"💃ᴇᴍᴏᴛᴇ\n ╰⓵╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓶╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓷╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓸╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓹╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓺╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓻╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓼╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓽╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓼╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓻╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓺╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓸╯\n",
			"💃ᴇᴍᴏᴛᴇ\n ╰⓷╯\n",
			"🔙",
		},
		nil,
		"╔─━━━━━━━━░░ 👑 ░░━━━━━━━━─╗\n ♔🔸〘😈𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘😈〙🔸♔\n🔸 Telegram ⟮ @JoinTheHelpers ⟯ 𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘 🔸 \n╚─━━━━━━━━░░  ★ ░░━━━━━━━━─╝"
	)
	if EHAUMMN111 == nil then
	else
		if EHAUMMN111 == 1 then
			es1()
		end
		if EHAUMMN111 == 2 then
			es2()
		end
		if EHAUMMN111 == 3 then
			es3()
		end
		if EHAUMMN111 == 4 then
			es4()
		end
		if EHAUMMN111 == 5 then
			es5()
		end
		if EHAUMMN111 == 6 then
			es6()
		end
		if EHAUMMN111 == 7 then
			es7()
		end
		if EHAUMMN111 == 8 then
			es8()
		end
		if EHAUMMN111 == 9 then
			es9()
		end
		if EHAUMMN111 == 10 then
			es10()
		end
		if EHAUMMN111 == 11 then
			es11()
		end
		if EHAUMMN111 == 12 then
			es12()
		end
		if EHAUMMN111 == 13 then
			es13()
		end
		if EHAUMMN111 == 14 then
			es14()
		end
		if EHAUMMN111 == 15 then
			HOME()
		end
	end
	UMRANIGAMER = -1
end

function es1()
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(1000)
	gg.editAll("2,202,301", gg.TYPE_DWORD)
	gg.clearResults()
	gg.toast("1st Emote Diamond✓")
end

function es2()
	gg.sleep(1000)
	gg.setRanges(
		gg.REGION_JAVA_HEAP
			| gg.REGION_C_HEAP
			| gg.REGION_C_ALLOC
			| gg.REGION_C_DATA
			| gg.REGION_C_BSS
			| gg.REGION_PPSSPP
			| gg.REGION_ANONYMOUS
	)
	gg.processResume()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,101", gg.TYPE_DWORD)
	gg.processResume()
	gg.toast("2nd Emote Diamond✓")
end

function es3()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,200,901", gg.TYPE_DWORD)
	gg.toast("3rd Emote Diamond✓")
end

function es4()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,201,401", gg.TYPE_DWORD)
	gg.toast("4th Emote Diamond✓")
end

function es5()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,203,201", gg.TYPE_DWORD)
	gg.toast("5th Emote Diamond✓")
end

function es6()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,606", gg.TYPE_DWORD)
	gg.toast("6th Emote Diamond✓")
end

function es7()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,801", gg.TYPE_DWORD)
	gg.toast("7th Emote Diamond✓")
end

function es8()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,701", gg.TYPE_DWORD)
	gg.toast("8th Emote Diamond✓")
end

function es9()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,604", gg.TYPE_DWORD)
	gg.toast("9th Emote Diamond✓")
end

function es10()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,603", gg.TYPE_DWORD)
	gg.toast("10th Emote Diamond✓")
end

function es11()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,602", gg.TYPE_DWORD)
	gg.toast("11th Emote Diamond✓")
end

function es12()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,401", gg.TYPE_DWORD)
	gg.toast("12th Emote Diamond✓")
end

function es13()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,306", gg.TYPE_DWORD)
	gg.toast("13th Emote Diamond✓")
end

function es14()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("2,200,101", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("2,202,605", gg.TYPE_DWORD)
	gg.toast("14th Emote Diamond✓")
end

function B4()
	gg.clearResults()
	gg.toast("◙◘◘◘◘◘◘◘◘◘10%")
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":/report", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.refineNumber(":/report", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 0 ]]
	gg.clearResults()
	gg.toast("◙◙◘◘◘◘◘◘◘◘20%")
	gg.setVisible(false)
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 685 ]]
	gg.refineNumber(":cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 685 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 685 ]]
	gg.clearResults()
	gg.toast("◙◙◙◘◘◘◘◘◘◘30%")
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":Cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 290 ]]
	gg.refineNumber(":Cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 290 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 290 ]]
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":/tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.refineNumber(":/tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 0 ]]
	gg.clearResults()
	gg.toast("◙◙◙◙◘◘◘◘◘◘40%")
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber(":/report", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.refineNumber(":/report", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 0 ]]
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber(":cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.refineNumber(":cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 0 ]]
	gg.clearResults()
	gg.toast("◙◙◙◙◙◘◘◘◘◘50%")
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber(":Cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.refineNumber(":Cheat", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 0 ]]
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.searchNumber(":/tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.refineNumber(":/tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	--[[ found: 0 ]]
	gg.getResults(99999, nil, nil, nil, nil, nil, nil, nil, nil)
	--[[ count: 0 ]]
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◘◘◘◘60%")
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":com.professor.ultimate", gg.TYPE_BYTE)
	gg.getResults(17071992)
	gg.editAll("0", gg.TYPE_BYTE)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":get_report_data", gg.TYPE_BYTE)
	gg.getResults(17071992)
	gg.editAll("0", gg.TYPE_BYTE)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◘◘◘70%")
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":report_apk", gg.TYPE_BYTE)
	gg.getResults(17071992)
	gg.editAll("0", gg.TYPE_BYTE)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":AntiCheat", gg.TYPE_BYTE)
	gg.getResults(17071992)
	gg.editAll("0", gg.TYPE_BYTE)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◘90%")
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":asia.csoversea.mbgame.anticheatexpert.com", gg.TYPE_BYTE)
	gg.getResults(17071992)
	gg.editAll("0", gg.TYPE_BYTE)
	gg.clearResults()
	os.remove("/sdcard/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs")
	os.remove("/mnt/shell/0/emulated/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove(
		"/mnt/shell/0/emulated/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs"
	)
	os.remove("/storage/emulated/0/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs")
	os.remove("/mnt/shell/0/emulated/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove(
		"/mnt/shell/0/emulated/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs"
	)
	os.remove("/storage/emulated/0/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs")
	os.remove("/mnt/shell/0/emulated/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove(
		"/mnt/shell/0/emulated/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs"
	)
	os.remove("/storage/emulated/0/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs")
	os.remove("/mnt/shell/0/emulated/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove(
		"/mnt/shell/0/emulated/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs"
	)
	os.remove("/storage/emulated/0/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/cache/GCloud.ini")
	os.remove("/sdcard/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs")
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer-temp"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/1375135419_47_1.1.0.14556_20201210094036_1246353928_cures.ifs.res"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/apollo_reslist.flist"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/filelist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/puffer_res.eifs"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.tencent.ig/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Paks/PufferFileList.json"
	)
	os.remove("src/main/java/com/google/errorprone/annotations")
	os.remove("src/main/java/com/google/errorprone/annotations")
	os.remove("src/main/java/com/google/errorprone/annotations/concurrent")
	os.remove("third_party.java_src.error_prone.project.annotations.Google_internal")
	os.remove("/data/data/com.tencent.ig/app_crashrecord/1004")
	os.remove("/data/data/com.tencent.ig/files/__tsecache.dat")
	os.remove("/data/data/com.tencent.ig/files/AdjustAttribution")
	os.remove("/data/data/com.tencent.ig/files/AdjustIoActivityState")
	os.remove("/data/data/com.tencent.ig/files/AdjustIoPackageQueue")
	os.remove("/data/data/com.tencent.ig/files/apm_cc")
	os.remove("/data/data/com.tencent.ig/files/AppEventsLogger.persistedevents")
	os.remove("/data/data/com.tencent.ig/files/cache.crc.dat")
	os.remove("/data/data/com.tencent.ig/files/gcTestConfig.txt")
	os.remove("/data/data/com.tencent.ig/files/hawk_data_init")
	os.remove("/data/data/com.tencent.ig/files/local_crash_lock")
	os.remove("/data/data/com.tencent.ig/files/tersafe.update")
	os.remove("/data/data/com.tencent.ig/files/mycpuinfo")
	function setvalue(address, flags, value)
		local tt = {}
		tt[1] = {}
		tt[1].address = address
		tt[1].flags = flags
		tt[1].value = value
		gg.setValues(tt)
	end
	so = gg.getRangesList("libUE4.so")[1].start
	py = 0x06eadd10
	setvalue(so + py, 16, 67109633)
	so = gg.getRangesList("libUE4.so")[1].start
	py = 0x06e952a0
	setvalue(so + py, 16, 67109633)
	so = gg.getRangesList("libUE4.so")[1].start
	py = 0x06e952b0
	setvalue(so + py, 16, 67109633)
	so = gg.getRangesList("libUE4.so")[1].start
	py = 0x06eb342c
	setvalue(so + py, 16, 67109633)
	so = gg.getRangesList("libUE4.so")[1].start
	py = 0x1103DD14
	setvalue(so + py, 16, 67109633)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber("909391408;808923191::8", gg.TYPE_DWORD)
	gg.getResults(999)
	gg.editAll("1089886885", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber("909391408", gg.TYPE_DWORD)
	gg.getResults(999)
	gg.editAll("1089886885", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.refineNumber(":tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	revert = gg.getResults(10000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll(":", gg.TYPE_BYTE)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":Tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.refineNumber(":Tss", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	revert = gg.getResults(10000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll(":", gg.TYPE_BYTE)
	gg.clearResults()
	gg.setVisible(false)
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber(":TSS", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.refineNumber(":TSS", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, 0, -1, 0)
	revert = gg.getResults(10000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll(":", gg.TYPE_BYTE)
	os.remove("/data/data/com.tencent.ig/files/tpnlcache.data")
	os.remove("/data/data/com.tencent.ig/files/tss_app_915c.dat")
	os.remove("/data/data/com.tencent.ig/files/tss_cs_stat2.dat")
	os.remove("/data/data/com.tencent.ig/files/tss_uts_c2.dat")
	os.remove("/data/data/com.tencent.ig/files/tss.i.m.dat")
	os.remove("/data/data/com.tencent.ig/files/tss_tmp/config2.xml.6dab626b")
	os.remove("/data/data/com.tencent.ig/files/tss_tmp/config3.xml")
	os.remove("/data/data/com.tencent.ig/files/tss_tmp/mn_cache.dat")
	os.remove("/data/data/com.tencent.ig/files/tss_tmp/tss_emu_c2.dat")
	os.remove("/data/data/com.tencent.ig/files/tss_tmp/tss.ano2.dat")
	os.remove("/storage/emulated/0/tencent/Midas/Log/com.pubg.krmobile/MidasLog.mmap")
	os.remove("/storage/emulated/0/Android/data/com.pubg.krmobile/files/cacheFile.txt")
	os.remove("/storage/emulated/0/Android/data/com.pubg.krmobile/cache/GCloud.config")
	os.remove("/storage/emulated/0/Android/data/com.pubg.krmobile/files/vmpcloudconfig.json")
	os.remove("/storage/emulated/0/Android/data/com.pubg.krmobile/files/login-identifier.txt")
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/Epic Games/KeyValueStore.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Intermediate/SaveGames/JKGuestRegisterCnt.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/AntiCheat.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/AppBaseConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/AppConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/AudioPluginConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/BuildConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/CustomDeviceList.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/DeviceProfiles.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/DeviceSwitchers.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/EditorPerProjectUserSettings.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/Engine.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/Game.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/GameUserSettings.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/Hardware.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/IGH5CachePluginConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/IMSDKConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/Input.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/LogSuppression.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/MidasConfig.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/OBHttp.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/OpenIDCommand.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/PufferDownloader.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/Scalability.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/ServerSwitch.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/UAE.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/Updater.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/UserCustom.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android/UserSettings.ini"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Pandora/dns.txt"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/CommonSaveGame_4126599880770857.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/LeagueStatue.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/loginInfoFile.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/MailPhoneLogin.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/personalprefs_4123188938540329.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/personalprefs_4126599880770857.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/playerprefs.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/RecruitFilterSetting_4123188938540329.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames/RecruitFilterSetting_4126599880770857.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/business_res_download_priority_table_new"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/cadge_table"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/dubber_table_ext"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/easy_buy_cfg"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/mentor_award_table"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/mentor_task_table"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/new_level_task_cover_table"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/social_authorize_config"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/TableDatas/upgrade_parameter"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo/apollo_loglist.json"
	)
	os.remove(
		"/storage/emulated/0/Android/data/com.pubg.krmobile/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/UpdateInfo/apollo_uuid_define.json"
	)
	gg.clearResults()
	gg.toast("◙◙◙◙◙◙◙◙◙◙100%")
	os.remove("src/main/java/com/google/errorprone/annotations")
	os.remove("src/main/java/com/google/errorprone/annotations")
	os.remove("src/main/java/com/google/errorprone/annotations/concurrent")
	os.remove("third_party.java_src.error_prone.project.annotations.Google_internal")
	gg.clearResults()
	gg.toast("Clear Reports Diamond✓")
end

function CLOSE()
	print(
		"𝕯𝖎𝖆𝖒𝖔𝖓𝖉 𝕸𝖔𝖉𝖘\n☆:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::☆\n💻YOUTUBE : Diamond Mods\n📳TELEGRAM : @JoinTheHelpers\n⚙️MADE BY : UnknownProfesor With ♥️\n ☆:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::☆"
	)
	os.exit()
end

while true do
	Time = os.date("")
	if gg.isVisible(true) then
		gg.setVisible(false)
		HOME()
	end
	if UMRANIGAMER == 1 then
		HOME()
	end
end
