function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xqKYZEENb(qKYZEENb)
	gg.clearResults()
	gg.setRanges(qKYZEENb[1]["memory"])
	gg.searchNumber(qKYZEENb[3]["value"], qKYZEENb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qKYZEENb[2]["name"] .. "UNCLE")
	else
		gg.refineNumber(qKYZEENb[3]["value"], qKYZEENb[3]["type"])
		gg.refineNumber(qKYZEENb[3]["value"], qKYZEENb[3]["type"])
		gg.refineNumber(qKYZEENb[3]["value"], qKYZEENb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qKYZEENb[2]["name"] .. "UNCLE")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qKYZEENb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qKYZEENb[v]["offset"]
						pysz[1].flags = qKYZEENb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qKYZEENb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qKYZEENb[2]["name"] .. "WWW DOT" .. xgsl .. "COM")
			else
				gg.toast(qKYZEENb[2]["name"] .. "UNCLE")
			end
		end
	end
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast("UNCLE" .. #t .. "XLUA")
			gg.addListItems(t)
		else
			gg.toast("UNCLE", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function setvalue(address, flags, value)
	local xs = {}
	xs[1] = {}
	xs[1].address = address
	xs[1].flags = flags
	xs[1].value = value
	gg.setValues(xs)
end
function readAdd(add)
	t = gg.getValues({ [1] = { address = add, flags = 4 } })
	add = string.format("%X", t[1].value)
	if #add == 16 then
		add = add:sub(9, 16)
	end
	if #add == 1 then
		add = add .. "0000000"
	else
		add = string.format("%d", "0x" .. add)
	end
	return add
end
function getAdd(so, offset, off1)
	add = gg.getRangesList(so)[1].start
	add = readAdd(add + offset)
	return add
end
function KANSO() end
function FINSHONEB()
	gg.toast("\nTC YA BIBI DONE ")
end
gg.setVisible(true)
function setvalue(address, flags, value)
	KANSO("Modify address value(Address, value type, value to be modified)")
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function libBase(offset, type, value, name)
	gg.setValues({ [1] = { address = MRKANSOONEB("libUE4.so")[1].start + offset, flags = type, value = value } })
	gg.toast(name .. "ONEB")
end
function setvalue(address, flags, value)
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function setvalue(address, flags, value)
	KANSO("Modify address value(Address, value type, value to be modified)")
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function libBase(offset, type, value, name)
	gg.setValues({ [1] = { address = MRKANSOONEB("libtersafe.so")[1].start + offset, flags = type, value = value } })
	gg.toast(name .. "ONEB")
end
function setvalue(address, flags, value)
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
local MRKANSOONEB = gg.getRangesList
function setvalue(address, flags, value)
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. " 开启成功 " .. #data .. "")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. " 开启成功 " .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. " 开启失败 ", false)
			return false
		end
	else
		gg.toast(" 开启失败 ")
		return false
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. "开启成功" .. #data .. "")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. "开启成功" .. #t .. "")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. "开启失败", false)
			return false
		end
	else
		gg.toast("开启失败")
		return false
	end
end
local L0_0
L0_0 = 0
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Name .. "共搜索到" .. #data .. "个数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.sleep(500)
			gg.toast(Name .. "开启成功,共修改" .. #t .. "条数据")
		else
			gg.toast(Name .. "副特征码错误or脸丑\n或者是已经开启过了")
			return false
		end
	else
		gg.toast(Name .. "主特征码错误or脸丑\n或者是已经开启过了")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function edit(orig, ret)
	_om = orig[1].memory or orig[1][1]
	_ov = orig[3].value or orig[3][1]
	_on = orig[2].name or orig[2][1]
	gg.clearResults()
	gg.setRanges(_om)
	gg.searchNumber(_ov, orig[3].type or orig[3][2])
	sz = gg.getResultCount()
	if sz < 1 then
		gg.toast(_on .. "开启失败")
	else
		sl = gg.getResults(720)
		for i = 1, sz do
			ist = true
			for v = 4, #orig do
				if ist == true and sl[i].value == _ov then
					cd = { {} }
					cd[1].address = sl[i].address + (orig[v].offset or orig[v][2])
					cd[1].flags = orig[v].type or orig[v][3]
					szpy = gg.getValues(cd)
					cdlv = orig[v].lv or orig[v][1]
					cdv = szpy[1].value
					if cdlv == cdv then
						pdjg = true
						ist = true
					else
						pdjg = false
						ist = false
					end
				end
			end
			if pdjg == true then
				szpy = sl[i].address
				for x = 1, #ret do
					xgpy = szpy + (ret[x].offset or ret[x][2])
					xglx = ret[x].type or ret[x][3]
					xgsz = ret[x].value or ret[x][1]
					xgdj = ret[x].freeze or ret[x][4]
					xgsj = { { address = xgpy, flags = xglx, value = xgsz } }
					if xgdj == true then
						xgsj[1].freeze = xgdj
						gg.addListItems(xgsj)
					else
						gg.setValues(xgsj)
					end
				end
				xgjg = true
			end
		end
		if xgjg == true then
			gg.toast(_on .. "开启成功")
		else
			gg.toast(_on .. "开启失败")
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast("已修改" .. #t .. "条数据")
			gg.addListItems(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		xgdj = qmxg[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast("✨开启成功✨" .. #data .. "")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]
					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
		else
			gg.toast("", false)
			return false
		end
	else
		gg.toast("")
		return false
	end
end
local app = {}
function Assert(data)
	if data == nil or data == "" or data == "nil" then
		return false
	else
		return true
	end
end
function mearrass(memory, array)
	if Assert(memory) and Assert(array) then
		return true
	else
		return false
	end
end
function typetab(array, type)
	local datatype = {}
	for i = 1, #array do
		if Assert(array[i].type) then
			table.insert(datatype, i, array[i].type)
		else
			if Assert(type) then
				table.insert(datatype, i, type)
			else
				return false
			end
		end
	end
	return true, datatype
end
function app.memorysearch(memory, array, type)
	gg.setVisible(false)
	local rx = mearrass(memory, array)
	if rx then
		local rx, datatype = typetab(array, type)
		if rx then
			if Assert(array[1].hv) then
				gg.clearResults()
				gg.setRanges(memory)
				gg.searchNumber(array[1].lv .. "~" .. array[1].hv, datatype[1])
				elsegg.clearResults()
				gg.setRanges(memory)
				gg.searchNumber(array[1].lv, datatype[1])
			end
			if gg.getResultCount() == 0 then
				return false
			else
				local tab = {}
				local data = gg.getResults(gg.getResultCount())
				gg.clearResults()
				for i = 1, #data do
					data[i].rx = true
				end
				for i = 2, #array do
					local t = {}
					local offset = array[i].offset
					for x = 1, #data do
						t[#t + 1] = {}
						t[#t].address = data[x].address + offset
						t[#t].flags = datatype[i]
					end
					local t = gg.getValues(t)
					for z = 1, #t do
						if Assert(array[i].hv) then
							if
								tonumber(t[z].value) < tonumber(array[i].lv)
								or tonumber(t[z].value) > tonumber(array[i].hv)
							then
								data[z].rx = false
							end
						else
							if tostring(t[z].value) ~= tostring(array[i].lv) then
								data[z].rx = false
							end
						end
					end
				end
				for i = 1, #data do
					if data[i].rx then
						tab[#tab + 1] = data[i].address
					end
				end
				if #tab > 0 then
					return true, tab
				else
					return false
				end
			end
		else
			print("type参数错误")
			gg.toast("type参数错误")
			os.exit()
		end
	else
		print("memory or array参数错误")
		gg.toast("memory or array参数错误")
		os.exit()
	end
end
function app.memoryread(addr, type)
	local t = {}
	t[1] = {}
	t[1].address = addr
	t[1].flags = type
	if #t > 0 then
		return true, gg.getValues(t)[1].value
	else
		return false
	end
end
function app.memorywrite(addr, type, value, freeze)
	local t = {}
	t[1] = {}
	t[1].address = addr
	t[1].flags = type
	t[1].value = value
	if #t > 0 then
		if Assert(freeze) then
			t[1].freeze = freeze
			return gg.addListItems(t)
		else
			return gg.setValues(t)
		end
	else
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条ΔΘ")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. "搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. "已修改" .. #t .. "条数据")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. "开启失败", false)
			return false
		end
	else
		gg.toast("搜索失败")
		return false
	end
end --- HASANKANSO ONE BULLET
function seted(address, flags, value, freeze)
	t = {}
	t[1] = {}
	t[1].address = address
	t[1].flags = flags
	t[1].value = value
	t[1].freeze = freezegg.addListItems(t)
end
function libBase(offset, type, value, name)
	a = os.clock()
	gg.setValues({
		[1] = {
			address = gg.getRangesList("libUE4.so" or "libtersafe.so")[1].start + offset,
			flags = type,
			value = value,
		},
	})
	b = os.clock() - a
	gg.toast(name .. " Coded by : @REALONTOP" .. b)
end
function setvalue(address, flags, value)
	local tt = {}
	tt[1] = {}
	tt[1].address = address
	tt[1].flags = flags
	tt[1].value = value
	gg.setValues(tt)
end

HOME = 1
function HOME()
	Darshancheatsyt = gg.multiChoice({
		"🛡️𝗟𝗢𝗕𝗕𝗬 𝗕𝗬𝗣𝗔𝗦𝗦  V1 ✅",
		"🛡️𝗟𝗢𝗕𝗕𝗬 𝗕𝗬𝗣𝗔𝗦𝗦  V2 ✅",
		"🛡️𝗟𝗢𝗕𝗕𝗬 𝗕𝗬𝗣𝗔𝗦𝗦  V3 ✅",
		"🛡️𝗟𝗢𝗕𝗕𝗬 𝗕𝗬𝗣𝗔𝗦𝗦  V4 ✅",
		"❌𝐄XIT❌️",
	}, nil, "⚡𝗗𝗔𝗥𝗦𝗛𝗔𝗡 𝟮.𝟭 𝗣𝗔𝗜𝗗 𝗕𝗬𝗣𝗔𝗦𝗦⋛⚡")

	if Darshancheatsyt == nil then
	else
		if Darshancheatsyt[1] == true then
			B1()
		end
		if Darshancheatsyt[2] == true then
			B2()
		end
		if Darshancheatsyt[3] == true then
			B3()
		end
		if Darshancheatsyt[4] == true then
			B4()
		end
		if Darshancheatsyt[5] == true then
			EXIT()
		end
	end
	PUBGMH = -1
end

function B1()
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("103,417", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("168,981", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("84,454", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("620137442967552;564058054983680", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("620137442967552", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288232579469934592", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("104,131", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("122,231", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("578351706144768;564058054983680", gg.TYPE_QWORD)
	gg.refineNumber("578351706144768", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288232579469934592", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("122,231", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("303473799200768;282587373240320", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("303473799200768", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("103,417", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("131330;134658", gg.TYPE_DWORD)
	gg.refineNumber("131330", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("84149249", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("104,131", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("135682;144387", gg.TYPE_DWORD)
	gg.refineNumber("135682", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("84149249", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("84,454", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("262403;135682", gg.TYPE_DWORD)
	gg.refineNumber("262403", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("84149249", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber("168,981", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("133,634;134,402", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("133,634", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("144,387;144,387", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("144,387", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("133,634;134,402", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("133,634", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("135,682;134,658", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("135,682", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("144,387;133,634", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("144,387", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("134,402;144,387", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("134,402", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("134,658;133,635", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("134,658", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("133,378;135,682", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("133,378", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("133,635;133,378", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("133,635", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("133,378;135,682", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.refineNumber("133,378", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	gg.getResults(50000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber(";Remaining", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(5000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll(";DARSHAN", gg.TYPE_WORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.searchNumber(";Eliminations", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
	gg.getResults(5000, nil, nil, nil, nil, nil, nil, nil, nil)
	gg.editAll(";CHEATS", gg.TYPE_WORD)
	gg.clearResults()
	gg.searchNumber(";Finished", gg.TYPE_WORD)
	gg.getResults(5000)
	gg.editAll(";CHEATS", gg.TYPE_WORD)
	gg.clearResults()
	gg.alert(" BYPASS DONE ✅")
end

function B2()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("620137442967552;564058054983680", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("620137442967552", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288232579469934592", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("578351706144768;564058054983680", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("578351706144768", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288232579469934592", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("303473799200768;282587373240320", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("303473799200768", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("582749752655872;572854148005888", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("582749752655872", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("565157566611456;572854148005888", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("565157566611456", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("281483566645248;281474976710656", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("281483566645248", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.searchNumber("577252194516992;288233678981562368", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("577252194516992")
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("134914;133378", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.refineNumber("134914", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("133378;144387", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.refineNumber("133378", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("67109633", gg.TYPE_DWORD)

	gg.alert("BYPASS V2 ACTIVATED")
end

function B3()
	gg.setVisible(false)
	gg.searchNumber("620137442967552;564058054983680", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("620137442967552", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288232579469934592", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("578351706144768;564058054983680", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("578351706144768", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288232579469934592", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("303473799200768;282587373240320", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("303473799200768", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("582749752655872;572854148005888", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("582749752655872", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("565157566611456;572854148005888", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("565157566611456", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("281483566645248;281474976710656", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("281483566645248", gg.TYPE_QWORD)
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.searchNumber("577252194516992;288233678981562368", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("577252194516992")
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("134914;133378", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.refineNumber("134914", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.setVisible(false)
	gg.searchNumber("133378;144387", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.refineNumber("133378", gg.TYPE_DWORD)
	gg.getResults(50000)
	gg.editAll("67109633", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.searchNumber("577252194516992;288233678981562368", gg.TYPE_QWORD, nil, nil, nil, nil)
	gg.refineNumber("577252194516992")
	gg.getResults(50000)
	gg.editAll("288233678981562368", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.searchNumber("135682;262403", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.refineNumber("135682")
	gg.getResults(62877)
	gg.editAll("133890", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.searchNumber("133634;262403", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.refineNumber("133634")
	gg.getResults(62877)
	gg.editAll("133890", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_C_DATA)
	gg.setVisible(false)
	gg.searchNumber("909391408", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(999)
	gg.editAll("1089886885", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.setVisible(false)
	gg.searchNumber("3298534883328~288233678981562368;288233678981562368", nil, nil, nil, nil, nil)
	gg.refineNumber("3298534883328~288233678981562368")
	gg.getResults(5678)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("65537;196609", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("67108866", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1701147238", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1869438821", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1601593600", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1684171615", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1597518385", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1601466991", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1868719460", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1711301733", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1818582883", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1711301996", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1717960813", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1711305833", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1701076855", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("1953062772", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("134350848", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_CODE_APP)
	gg.setVisible(false)
	gg.searchNumber("134218114", gg.TYPE_DWORD, nil, nil, nil, nil)
	gg.getResults(90000)
	gg.editAll("0", gg.TYPE_DWORD)
	gg.clearResults()
	gg.alert("BYPASS DONE ✅ ")
end

function B4()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("620137442967552;564058054983680", 32)
	gg.refineNumber("620137442967552", 32)
	gg.getResults(57505)
	gg.editAll("288233678981562368", 32)
	gg.clearResults()
	gg.toast("DARSHAN BYPASS")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("577,252,194,516,992;288233678981562368", 32)
	gg.refineNumber("577,252,194,516,992", 32)
	gg.getResults(57505)
	gg.editAll("288233678981562368", 32)
	gg.clearResults()
	gg.toast("DARSHAN BYPASS")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("572854148005888;564058054983680", 32)
	gg.refineNumber("572854148005888", 32)
	gg.getResults(57505)
	gg.editAll("361418272522109953", 32)
	gg.clearResults()
	gg.toast("DARSHAN BYPASS")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("573,953,659,633,664;564058054983680", 32)
	gg.refineNumber("573,953,659,633,664", 32)
	gg.getResults(57505)
	gg.editAll("288233678981562368", 32)
	gg.clearResults()
	gg.toast("DARSHAN BYPASS")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("564,062,349,950,976;564058054983680", 32)
	gg.refineNumber("564,062,349,950,976", 32)
	gg.getResults(57505)
	gg.editAll("288233678981562368", 32)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber("620137442967552", 32)
	gg.refineNumber("620137442967552", 32)
	gg.getResults(575)
	gg.editAll("288233678981562368", 32)
	gg.clearResults()
	gg.toast("Darshan cheats ")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("620137442967552;303473799200768", gg.TYPE_QWORD)
	gg.refineNumber("620137442967552")
	gg.getResults(50000)
	gg.editAll("288516253469900800", gg.TYPE_QWORD)
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber("67109633", 4)
	gg.refineNumber("67109633", 4)
	gg.getResults(999)
	gg.editAll("257", 4)
	gg.clearResults()
	gg.toast("Darshan cheats ")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("564,058,054,983,680;579,451,217,772,544", 32)
	gg.refineNumber("564,058,054,983,680", 32)
	gg.getResults(50000)
	gg.editAll("288,233,678,981,562,368", 32)
	gg.clearResults()
	gg.toast("Darshan cheats ")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("572,854,148,005,888;582,749,752,655,872", 32)
	gg.refineNumber("572,854,148,005,888", 32)
	gg.getResults(50000)
	gg.editAll("288,233,678,981,562,368", 32)
	gg.clearResults()
	gg.searchNumber("909391408", 4)
	gg.getResults(62877)
	gg.editAll("1089886885", 4)
	gg.clearResults()
	gg.toast("Darshan cheats ")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.setVisible(false)
	gg.searchNumber("909391408", 4)
	gg.getResults(999)
	gg.editAll("1089886885", 4)
	gg.clearResults()
	gg.toast("Darshan cheats ")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("620137442967552;303473799200768", gg.TYPE_QWORD)
	gg.refineNumber("620137442967552")
	gg.getResults(50000)
	gg.editAll("288516253469900800", gg.TYPE_QWORD)
	gg.clearResults()
	gg.toast("Darshan cheats ")
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.searchNumber("578351706144768;564058054983680", gg.TYPE_QWORD)
	gg.refineNumber("578351706144768")
	gg.getResults(50000)
	gg.editAll("288516253469900800", gg.TYPE_QWORD)
	gg.clearResults()
	gg.toast("Darshan cheats ")
end

function EXIT()
	print("🌸𝗗𝗔𝗥𝗦𝗛𝗔𝗡 BYPASS🌸  ")
	gg.skipRestoreState()
	gg.setVisible(true)
	os.exit()
end
while true do
	if gg.isVisible(true) then
		PUBGMH = 1
		gg.setVisible(false)
	end
	gg.clearResults()
	if PUBGMH == 1 then
		HOME()
	end
end
