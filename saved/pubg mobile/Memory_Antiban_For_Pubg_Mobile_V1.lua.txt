function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]

	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end

		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]

			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = v.flags
			end

			tmp = gg.getValues(tmp)

			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end

		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end

		if #data > 0 then
			gg.toast("搜索η" .. #data .. "条ΔΘ")
			local t = {}
			local base = Search[1][2]
			for i = 1, #data do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = Type
					t[#t].value = w[1]

					if w[3] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
		else
			gg.toast("not found", false)
			return false
		end
	else
		gg.toast("Not Found")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条ΔΘ")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
function Fxs(Search, Write, Neicun, Mingcg, Shuzhiliang)
	gg.clearResults()
	gg.setRanges(Neicun)
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Search[1][3])
	local count = gg.getResultCount()
	local result = gg.getResults(count)
	gg.clearResults()
	local data = {}
	local base = Search[1][2]
	if count > 0 then
		for i, v in ipairs(result) do
			v.isUseful = true
		end
		for k = 2, #Search do
			local tmp = {}
			local offset = Search[k][2] - base
			local num = Search[k][1]
			for i, v in ipairs(result) do
				tmp[#tmp + 1] = {}
				tmp[#tmp].address = v.address + offset
				tmp[#tmp].flags = Search[k][3]
			end
			tmp = gg.getValues(tmp)
			for i, v in ipairs(tmp) do
				if tostring(v.value) ~= tostring(num) then
					result[i].isUseful = false
				end
			end
		end
		for i, v in ipairs(result) do
			if v.isUseful then
				data[#data + 1] = v.address
			end
		end
		if #data > 0 then
			gg.toast(Mingcg .. "搜索到" .. #data .. "条数据")
			local t = {}
			local base = Search[1][2]
			if Shuzhiliang == "" and Shuzhiliang > 0 and Shuzhiliang < #data then
				Shuzhiliang = Shuzhiliang
			else
				Shuzhiliang = #data
			end
			for i = 1, Shuzhiliang do
				for k, w in ipairs(Write) do
					offset = w[2] - base
					t[#t + 1] = {}
					t[#t].address = data[i] + offset
					t[#t].flags = w[3]
					t[#t].value = w[1]
					if w[4] == true then
						local item = {}
						item[#item + 1] = t[#t]
						item[#item].freeze = true
						gg.addListItems(item)
					end
				end
			end
			gg.setValues(t)
			gg.toast(Mingcg .. "已修改" .. #t .. "条数据")
			gg.addListItems(t)
		else
			gg.toast(Mingcg .. "开启失败", false)
			return false
		end
	else
		gg.toast("搜索失败")
		return false
	end
end
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end
--配置↑↑↑勿修改，调用方法   xqmnb(qmnb)
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, Loading1)
	for x = 1, #Loading1 do
		xgpy = szpy + Loading1[x]["address"]
		xglx = Loading1[x]["flags"]
		xgsz = Loading1[x]["value"]
		xgdj = Loading1[x]["freeze"]
		if xgdj == nil or xgdj == "" then
			gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		else
			gg.addListItems({ [1] = { address = xgpy, flags = xglx, freeze = xgdj, value = xgsz } })
		end
		xgsl = xgsl + 1
		xgjg = true
	end
end
function LoadingQ(Loading)
	gg.setRanges(Loading[1]["memory"])
	gg.searchNumber(Loading[3]["value"], Loading[3]["flags"])
	if gg.getResultCount() == 0 then
		gg.toast(Loading[2]["Projects"] .. "Load失败❌")
	else
		gg.refineNumber(Loading[3]["value"], Loading[3]["flags"])
		gg.refineNumber(Loading[3]["value"], Loading[3]["flags"])
		gg.refineNumber(Loading[3]["value"], Loading[3]["flags"])
		if gg.getResultCount() == 0 then
			gg.toast(Loading[2]["Projects"] .. "Load失败❌")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #Loading do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + Loading[v]["address"]
						pysz[1].flags = Loading[v]["flags"]
						szpy = gg.getValues(pysz)
						pdpd = Loading[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, Loading1)
				end
			end
			if xgjg == true then
			end
		end
	end
end
function edit(orig, ret)
	_om = orig[1].memory or orig[1][1]
	_ov = orig[3].value or orig[3][1]
	_on = orig[2].name or orig[2][1]
	gg.clearResults()
	gg.setRanges(_om)
	gg.searchNumber(_ov, orig[3].type or orig[3][2])
	sz = gg.getResultCount()
	if sz < 1 then
		gg.toast(_on .. " 开启失败")
	else
		sl = gg.getResults(50000)
		for i = 1, sz do
			ist = true
			for v = 4, #orig do
				if ist == true and sl[i].value == _ov then
					cd = { {} }
					cd[1].address = sl[i].address + (orig[v].offset or orig[v][2])
					cd[1].flags = orig[v].type or orig[v][3]
					szpy = gg.getValues(cd)
					cdlv = orig[v].lv or orig[v][1]
					cdv = szpy[1].value
					if cdlv == cdv then
						pdjg = true
						ist = true
					else
						pdjg = false
						ist = false
					end
				end
			end
			if pdjg == true then
				szpy = sl[i].address
				for x = 1, #ret do
					xgpy = szpy + (ret[x].offset or ret[x][2])
					xglx = ret[x].type or ret[x][3]
					xgsz = ret[x].value or ret[x][1]
					xgdj = ret[x].freeze or ret[x][4]
					xgsj = { { address = xgpy, flags = xglx, value = xgsz } }
					if xgdj == true then
						xgsj[1].freeze = xgdj
						gg.addListItems(xgsj)
					else
						gg.setValues(xgsj)
					end
				end
				xgjg = true
			end
		end
		if xgjg == true then
			gg.toast(_on .. " 开启成功")
		else
			gg.toast(_on .. " 开启失败")
		end
	end
end
local app = {}
--设置搜索模式
app.memorySearchMode = function(MEMORY)
	if MEMORY == 2 then
		gg.setRanges(
			gg.REGION_JAVA_HEAP
				| gg.REGION_C_HEAP
				| gg.REGION_C_ALLOC
				| gg.REGION_C_DATA
				| gg.REGION_C_BSS
				| gg.REGION_PPSSPP
		)
	end
	if MEMORY == -1 then
		gg.setRanges(gg.REGION_VIDEO)
	end
	if MEMORY == -2 then
		gg.setRanges(gg.REGION_CODE_APP | gg.REGION_CODE_SYS)
	end
	if MEMORY == 0 then
		gg.setRanges(gg.REGION_ANONYMOUS)
	end
end
function checkType(dataType)
	local type
	if dataType == "D" or dataType == "D" then
		type = gg.TYPE_DWORD
	end
	if dataType == "F" then
		type = gg.TYPE_FLOAT
	end
	if dataType == "E" then
		type = gg.TYPE_DOUBLE
	end
	if dataType == "B" or dataType == "B" then
		type = gg.TYPE_BYTE
	end
	if dataType == "W" or dataType == "W" then
		type = gg.TYPE_WORD
		os.exit()
	end
	return type
end
app.memorySearch = function(pkgName, isNewSearch, address, tb, dataType)
	gg.clearResults()
	gg.setVisible(false)
	local isSucess = gg.searchNumber(tb[1]["lv"], checkType(dataType), false, gg.SIGN_EQUAL, address, -1)
	local t = gg.getResults(9999)
	local tab = {}
	local data = {}
	for i = 1, #t do
		for j = 2, #tb do
			tab[j] = {}
			tab[j].address = t[i].address + tb[j]["offset"]
			if tb[j]["type"] == nil then
				tab[j].flags = t[i].flags
			else
				tab[j].flags = checkType(tb[j]["type"])
			end
			tab = gg.getValues(tab)
			if tab[j].value == tb[j]["lv"] then
				data[#data + 1] = t[i].address
			end
		end
	end
	gg.clearResults()
	return isSucess, data
end
app.memoryWrite = function(pkgName, address, value, dataType)
	gg.setVisible(false)
	local t = {}
	t[1] = {}
	t[1].address = address
	t[1].flags = checkType(dataType)
	t[1].value = value
	return gg.setValues(t)
end

GG = { Read, Write }
function GG.ReadWrite(Read, Writw)
	TZ = {}
	dataTZ = Read[1]
	offset = dataTZ[2]
	for i = 1, #Read do
		TZA = Read[i]
		LV = { ["lv"] = TZA[1], ["offset"] = TZA[2] - offset }
		table.insert(TZ, i, LV)
	end
	app.memorySearchMode(Memory)
	isSuuess, TUG = app.memorySearch(pkgName, true, 0, TZ, Type)
	if TUG[1] == nil then
	else
		for ii = 1, #TUG do
			for iii = 1, #Write do
				dataxg = Write[iii]
				value = dataxg[1]
				Deviant = dataxg[2]
				app.memoryWrite(pkgName, TUG[ii] + Deviant - offset, value, Type)
			end
		end
		gg.toast(ID .. "开启成功")
	end
end
function SearchWrite(Search, Write, Type)
	gg.clearResults()
	gg.setVisible(false)
	gg.searchNumber(Search[1][1], Type)
	local t = gg.getResults(9999)
	gg.clearResults()
	if t ~= nil then
		local r = {}
		for j = 2, #Search do
			for i, v in ipairs(t) do
				r[i] = {}
				r[i].address = v.address + Search[j][2] - Search[1][2]
				r[i].flags = v.flags
			end
			r = gg.getValues(r)
			for i = #t, 1, -1 do
				if tostring(r[i].value) ~= tostring(Search[j][1]) then
					table.remove(t, i)
					table.remove(r, i)
				end
			end
		end
		--写入数据
		local r = {}
		for i = 1, #t do
			for j = 1, #Write do
				r[#r + 1] = {}
				r[#r].address = t[i].address + Write[j][2] - Search[1][2]
				r[#r].flags = t[i].flags
				r[#r].value = Write[j][1]
				r[#r].freeze = true --冻结的话修改后面加false
			end
		end
		gg.setValues(r)
	end
end
--gg.addListItems(r)
function split(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
			nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
			break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end
function xgxc(szpy, qmxg)
	for x = 1, #qmxg do
		xgpy = szpy + qmxg[x]["offset"]
		xglx = qmxg[x]["type"]
		xgsz = qmxg[x]["value"]
		gg.setValues({ [1] = { address = xgpy, flags = xglx, value = xgsz } })
		xgsl = xgsl + 1
	end
end
function xqmnb(qmnb)
	gg.clearResults()
	gg.setRanges(qmnb[1]["memory"])
	gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
	if gg.getResultCount() == 0 then
		gg.toast(qmnb[2]["name"] .. "开启失败")
	else
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
		if gg.getResultCount() == 0 then
			gg.toast(qmnb[2]["name"] .. "开启失败")
		else
			sl = gg.getResults(999999)
			sz = gg.getResultCount()
			xgsl = 0
			if sz > 999999 then
				sz = 999999
			end
			for i = 1, sz do
				pdsz = true
				for v = 4, #qmnb do
					if pdsz == true then
						pysz = {}
						pysz[1] = {}
						pysz[1].address = sl[i].address + qmnb[v]["offset"]
						pysz[1].flags = qmnb[v]["type"]
						szpy = gg.getValues(pysz)
						pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
						szpd = split(pdpd, ";")
						tzszpd = szpd[1]
						pyszpd = szpd[2]
						if tzszpd == pyszpd then
							pdjg = true
							pdsz = true
						else
							pdjg = false
							pdsz = false
						end
					end
				end
				if pdjg == true then
					szpy = sl[i].address
					xgxc(szpy, qmxg)
					xgjg = true
				end
			end
			if xgjg == true then
				gg.toast(qmnb[2]["name"] .. "开启成功,共修改" .. xgsl .. "条数据")
			else
				gg.toast(qmnb[2]["name"] .. "开启失败")
			end
		end
	end
end

-----------------------------------------------------------------------------------------

SN = gg.searchNumber
GC = gg.choice
MC = gg.multiChoice
GR = gg.getResults
GRC = gg.getResultCount
EA = gg.editAll
SA = gg.searchAddress
TX = gg.TYPE_XOR
TB = gg.TYPE_BYTE
TQ = gg.TYPE_QWORD
TF = gg.TYPE_FLOAT
TDB = gg.TYPE_DOUBLE
TW = gg.TYPE_WORD
TD = gg.TYPE_DWORD
TA = gg.TYPE_AUTO
SE = gg.SIGN_EQUAL
SF = gg.SIGN_FLOAT
TT = gg.toast
CR = gg.clearResults
AR = gg.alert
SR = gg.setRanges
RA = gg.REGION_ANONYMOUS
RB = gg.REGION_BAD
RC = gg.REGION_C_ALLOC
SV = gg.setValues
PT = gg.prompt
PR = print
FC = gg.processKill
OE = os.exit

-----------------------------------------------------------------------------------------

function Main()
	SN = gg.choice({
		"🗒️ Step 1一部",
		"🗒️ 一部Step 2",
		"❌ 退出脚本",
	}, nil, os.date("当前时间:%Y年-%m月-%d日 %H时 %M分sake、凉城QQ：851350671"))
	if SN == 1 then
		fbjf()
	end
	if SN == 2 then
		gbfx()
	end
	if SN == 3 then
		os.exit()
	end
	XGCK = -1
end

function fbjf()
	edit({
		{ gg.REGION_C_ALLOC }, --Values Ranges
		{ "Bypass" }, --Name
		{ 16384, 4 },
		{ 16384, 4, 4 },
		{ 16384, 8, 4 },
		{ 16384, 12, 4 },
		{ 16384, 16, 4 },
		{ 16384, 20, 4 },
		{ 16384, 508, 4 },
	}, {
		{ 4451, 100, 4, true },
	})
	gg.clearResults()
	gg.toast("Bypass Done!")
end
function gbfx()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC)
	gg.searchNumber("2.2958874e-41;16384D;16384D;16384D;16384D;16384D::24", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1) --saifu_hkcc
	if gg.getResultCount() == 0 then
		gg.alert("VALUE NOT FOUND")
	else
		gg.searchNumber("2.2958874e-41", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
		n = gg.getResultCount()
		jz = gg.getResults(n)
		for i = 1, n do
			--Saifu
			gg.addListItems({ [1] = { address = jz[i].address - 248, flags = 4, freeze = true, value = 70000 } })
			gg.addListItems({ [1] = { address = jz[i].address - 252, flags = 4, freeze = true, value = 4329 } })
			gg.addListItems({ [1] = { address = jz[i].address + 4, flags = 4, freeze = true, value = 65538 } })
			gg.addListItems({ [1] = { address = jz[i].address + 48, flags = 4, freeze = true, value = 150 } })
			gg.addListItems({ [1] = { address = jz[i].address + 100, flags = 4, freeze = true, value = 69987 } })
		end
	end
	gg.toast("防封开启成功 ACTIVATED\nDATA SET NUMBERS SUCCESSFUL")
end
function Exit()
	gg.skipRestoreState()
	gg.setVisible(true)
	os.exit()
end

while true do
	if gg.isVisible(true) then
		XGCK = 1
		gg.setVisible(false)
	end
	gg.clearResults()
	if XGCK == 1 then
		Main()
	end
end
